// Code generated by mockery v2.31.1. DO NOT EDIT.

package serve

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

type MockBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilder) EXPECT() *MockBuilder_Expecter {
	return &MockBuilder_Expecter{mock: &_m.Mock}
}

// BuildServer provides a mock function with given fields: ctx
func (_m *MockBuilder) BuildServer(ctx context.Context) (Server, error) {
	ret := _m.Called(ctx)

	var r0 Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (Server, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) Server); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuilder_BuildServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildServer'
type MockBuilder_BuildServer_Call struct {
	*mock.Call
}

// BuildServer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBuilder_Expecter) BuildServer(ctx interface{}) *MockBuilder_BuildServer_Call {
	return &MockBuilder_BuildServer_Call{Call: _e.mock.On("BuildServer", ctx)}
}

func (_c *MockBuilder_BuildServer_Call) Run(run func(ctx context.Context)) *MockBuilder_BuildServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBuilder_BuildServer_Call) Return(_a0 Server, _a1 error) *MockBuilder_BuildServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuilder_BuildServer_Call) RunAndReturn(run func(context.Context) (Server, error)) *MockBuilder_BuildServer_Call {
	_c.Call.Return(run)
	return _c
}

// SupportsServer provides a mock function with given fields:
func (_m *MockBuilder) SupportsServer() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBuilder_SupportsServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportsServer'
type MockBuilder_SupportsServer_Call struct {
	*mock.Call
}

// SupportsServer is a helper method to define mock.On call
func (_e *MockBuilder_Expecter) SupportsServer() *MockBuilder_SupportsServer_Call {
	return &MockBuilder_SupportsServer_Call{Call: _e.mock.On("SupportsServer")}
}

func (_c *MockBuilder_SupportsServer_Call) Run(run func()) *MockBuilder_SupportsServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBuilder_SupportsServer_Call) Return(_a0 bool) *MockBuilder_SupportsServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuilder_SupportsServer_Call) RunAndReturn(run func() bool) *MockBuilder_SupportsServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuilder creates a new instance of MockBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilder {
	mock := &MockBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
