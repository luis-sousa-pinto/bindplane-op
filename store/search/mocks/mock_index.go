// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	modelsearch "github.com/observiq/bindplane-op/model/search"
	mock "github.com/stretchr/testify/mock"

	search "github.com/observiq/bindplane-op/store/search"
)

// MockIndex is an autogenerated mock type for the Index type
type MockIndex struct {
	mock.Mock
}

// Matches provides a mock function with given fields: query, indexID
func (_m *MockIndex) Matches(query *search.Query, indexID string) bool {
	ret := _m.Called(query, indexID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*search.Query, string) bool); ok {
		r0 = rf(query, indexID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *MockIndex) Remove(_a0 modelsearch.Indexed) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(modelsearch.Indexed) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, query
func (_m *MockIndex) Search(ctx context.Context, query *search.Query) ([]string, error) {
	ret := _m.Called(ctx, query)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *search.Query) ([]string, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *search.Query) []string); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *search.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: Labels
func (_m *MockIndex) Select(Labels map[string]string) []string {
	ret := _m.Called(Labels)

	var r0 []string
	if rf, ok := ret.Get(0).(func(map[string]string) []string); ok {
		r0 = rf(Labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Suggestions provides a mock function with given fields: query
func (_m *MockIndex) Suggestions(query *search.Query) ([]*search.Suggestion, error) {
	ret := _m.Called(query)

	var r0 []*search.Suggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(*search.Query) ([]*search.Suggestion, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*search.Query) []*search.Suggestion); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*search.Suggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(*search.Query) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: _a0
func (_m *MockIndex) Upsert(_a0 modelsearch.Indexed) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(modelsearch.Indexed) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockIndex interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIndex creates a new instance of MockIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIndex(t mockConstructorTestingTNewMockIndex) *MockIndex {
	mock := &MockIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
