apiVersion: bindplane.observiq.com/v1
kind: ProcessorType
metadata:
  name: count_logs
  displayName: Count Logs
  description: Count logs matching some expression.
spec:
  version: 0.0.1
  parameters:
    - name: match
      label: Match Expression
      description: Expr expression to find matching logs.
      type: string
      default: "true"
      required: true
      documentation:
        - text: Language Reference
          url: https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md
    - name: metric_name
      label: Metric Name
      description: Name to give the created metric.
      type: string
      default: log.count
      required: true
    - name: metric_units
      label: Metric Units
      description: Units to give the created metric.
      type: string
      default: '{logs}'
      required: true
      documentation:
        - text: Available Units (Unified Code for Units of Measure)
          url: https://unitsofmeasure.org/ucum#section-Alphabetic-Index-By-Name
    - name: enable_attributes
      label: Enable Attributes
      description: Enable to add attributes to the created metric.
      type: bool
      default: false
      options:
        gridColumns: 12
    - name: attributes
      label: Metric Attributes
      description: Mapping of attributes to assign the created metric to location of value in the log.
      type: map
      documentation:
        - text: How to Extract Log Attributes
          url: https://github.com/observIQ/observiq-otel-collector/blob/main/processor/logcountprocessor/README.md#expression-language
      options:
        gridColumns: 12
      required: true
      relevantIf:
        - name: enable_attributes
          operator: equals
          value: true
    - name: interval
      label: Interval
      description: Interval (seconds) to count logs over.
      type: int
      default: 60
      advancedConfig: true

  logs:
    processors: |
      - logcount:
          route: {{ bpRouteID }}
          match: '{{ .match }}'
          metric_name: '{{ .metric_name }}'
          metric_unit: '{{ .metric_units }}'
          interval: {{ .interval }}s
          {{ if and (eq .enable_attributes true) .attributes }}
          attributes:
          {{ range $k, $v := .attributes }}
            {{ $k }}: '{{ $v }}'
          {{ end }}
          {{ end }}
