// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	authenticator "github.com/observiq/bindplane-op/authenticator"

	mock "github.com/stretchr/testify/mock"

	sessions "github.com/gorilla/sessions"
)

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, session
func (_m *MockAuthenticator) Login(ctx *gin.Context, session *sessions.Session) (*authenticator.LoginInfo, error) {
	ret := _m.Called(ctx, session)

	var r0 *authenticator.LoginInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *sessions.Session) (*authenticator.LoginInfo, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *sessions.Session) *authenticator.LoginInfo); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authenticator.LoginInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *sessions.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Middleware provides a mock function with given fields:
func (_m *MockAuthenticator) Middleware() gin.HandlerFunc {
	ret := _m.Called()

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// Verify provides a mock function with given fields: ctx, session
func (_m *MockAuthenticator) Verify(ctx *gin.Context, session *sessions.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *sessions.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
