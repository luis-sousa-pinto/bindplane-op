name: CI
on:
  pull_request:
  merge_group:
  push:
    branches:
      - main

permissions:
  # Make sure package write permission is always enabled, even
  # for Dependabot pull requests.
  packages: write

# Prevent multiple runs on the same branch. This is important for webhooks
# that must be run in order.
concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.20.8"
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: make gomoddownload
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v3
        with:
          path: /home/runner/go/bin
          key: tooling-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - name: Install Tools
        if: steps.tool-cache.outputs.cache-hit != 'true'
        run: make install-tools
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Cache NPM
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: npm-cache-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: npm-cache-
      - name: Install NPM Packages
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: make install-ui

  # Run shellcheck against scripts
  shellcheck:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Run shellcheck
        uses: ludeeus/action-shellcheck@master
        with:
          version: v0.8.0
          scandir: './scripts'
          severity: info

  # Run go vet against Go code.
  vet:
    runs-on: "ubuntu-22.04"
    needs:
      - setup-environment
    strategy:
      matrix:
        goos:
          - darwin
          - linux
          - windows
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.20.8"
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Prep UI Dir
        run: make prep
      - name: Vet
        run: GOOS=${{ matrix.goos }} go vet ./...

  # Run gosec against Go code.
  secure:
    runs-on: "ubuntu-22.04"
    needs:
      - setup-environment
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.20.8"
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v3
        with:
          path: /home/runner/go/bin
          key: tooling-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - name: Gosec
        run: make secure

  # Check license headers in source files.
  check-license:
    runs-on: "ubuntu-22.04"
    needs:
      - setup-environment
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.20.8"
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v3
        with:
          path: /home/runner/go/bin
          key: tooling-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - name: Check License Headers
        run: make check-license

  # Lint Go and Node.
  lint:
    runs-on: "ubuntu-22.04"
    needs:
      - setup-environment
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.20.8"
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v3
        with:
          path: /home/runner/go/bin
          key: tooling-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Cache NPM
        uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: npm-cache-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: npm-cache-
      - name: Lint
        run: make lint
      - name: Check Generate
        run: make generate && bash .github/workflows/scripts/assert-no-diff.sh
      - name: Check Swagger
        run: make swagger && bash .github/workflows/scripts/assert-no-diff.sh

  # Run ui tests.
  ui-test:
    runs-on: "ubuntu-22.04"
    needs:
      - setup-environment
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Cache NPM
        uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: npm-cache-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: npm-cache-
      - run: make ci
      - run: make ui-test-with-cover
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ui/coverage/lcov.info
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Run Go tests
  go-test:
    runs-on: "ubuntu-22.04"
    needs:
      - setup-environment
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.20.8"
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v3
        with:
          path: /home/runner/go/bin
          key: tooling-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - run: make test-with-cover
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Run Goreleaser to build binaries, packages, and container images.
  build:
    runs-on: "ubuntu-latest-4-cores"
    needs:
      - setup-environment
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: "1.20.8"
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v3
        with:
          path: /home/runner/go/bin
          key: tooling-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Cache NPM
        uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: npm-cache-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: npm-cache-
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      # Cache Goreleaser's container image output to be used
      # by other jobs that depend on this job.
      - name: Set GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV

      # Build binaries, packages, and container images
      - name: Test GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: v1.20.0
          # Use Goreleaser Pro's `split` feature to build linux binaries, archives,
          # packages, and container images.
          # NOTE: Goreleaser output will be placed in dist/linux/ instead of dist/.
          args: release --skip-publish --clean --snapshot --split
          distribution: goreleaser-pro
        env:
          GOOS: linux
          GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      # Future steps expect build output to be under `dist/`
      - name: Move Build Output
        run: mv dist/linux/* dist/ && rmdir dist/linux

      # Push container images to ghcr.io for use in other steps.
      # It is safe to push development images with the github sha tag.
      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Goreleaser uses a 7 character short commit hash for the `ShortCommit`
      # template variable. This conflicts with ArgoCD's 8 character hash.
      # To get around this, add the short commit tag here instead of within
      # the Goreleaser configuration.
      # https://github.com/argoproj/argo-cd/issues/11976#issue-1532285712
      - name: Tag Images with GITHUB_SHA_SHORT
        run: |
          docker tag ghcr.io/observiq/bindplane-amd64:latest ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}
          docker tag ghcr.io/observiq/bindplane-arm64:latest ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}
          docker tag ghcr.io/observiq/bindplane-amd64:latest-ubi8 ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}-ubi8
          docker tag ghcr.io/observiq/bindplane-arm64:latest-ubi8 ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}-ubi8

      - name: Push Container Images to Github Container Registry
        run: |
          docker push ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}
          docker push ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}
          docker push ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}-ubi8
          docker push ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}-ubi8
          docker manifest create "ghcr.io/observiq/bindplane:${{ env.GITHUB_SHA_SHORT }}" \
                  "ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}" \
                  "ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}"
          docker manifest create "ghcr.io/observiq/bindplane:${{ env.GITHUB_SHA_SHORT }}-ubi8" \
                  "ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}-ubi8" \
                  "ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}-ubi8"
          docker manifest push "ghcr.io/observiq/bindplane:${{ env.GITHUB_SHA_SHORT }}"
          docker manifest push "ghcr.io/observiq/bindplane:${{ env.GITHUB_SHA_SHORT }}-ubi8"

      # Scan binaries for invalid 3rd party licenses
      - name: Scan Binaries
        run: lichen --config=./license.yaml $(find dist -type f -name bindplane | xargs)

      # Integration tests depend on the image producted by Goreleaser
      - name: Run Go Integration Tests
        run: make test-integration

      # Install CINC for testing packages and container image
      - name: Install Cinc (Inspec)
        run: |
          curl -L https://omnitruck.cinc.sh/install.sh | \
          sudo bash -s -- -P cinc-auditor -v 4

      # Test server package
      - name: Install Deb Server Package
        run: 'sudo apt-get install -y -f ./dist/bindplane_*_linux_amd64.deb'
      - name: Create BindPlane config
        run: |
          bash .github/workflows/scripts/create-test-server-config.sh
          sudo systemctl restart bindplane

      - name: Test Server Install
        run: |
          VERSION=$(ls dist/ |  grep linux_amd64.deb | rev | cut -c17- | rev | cut -c11- | sed 's/-SNAP/~SNAP/g')
          sudo cinc-auditor exec test/inspec/package/install/package.rb --input version=$VERSION

      - name: Run Cinc Tests (Container Image)
        run: make inspec-continer-image

  publish-stage-image:
    if: github.ref == 'refs/heads/main'
    runs-on: "ubuntu-22.04"
    needs:
      - secure
      - check-license
      - ui-test
      - go-test
      - build
    steps:
      - name: Checkout Repo
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set GITHUB_SHA_SHORT
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: echo "GITHUB_SHA_SHORT=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: ${{ github.actor != 'dependabot[bot]' }}
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: docker/setup-qemu-action@v2

      - name: Login to Github Container Registry
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Dev Image
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
          docker pull ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}
          docker pull ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}

      - name: Tag and Push Stage Image
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
          docker tag \
            ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }} \
            ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}-stage
          docker push ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}-stage

          docker tag \
            ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }} \
            ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}-stage
          docker push ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}-stage

          docker manifest create "ghcr.io/observiq/bindplane:${{ env.GITHUB_SHA_SHORT }}-stage" \
                  "ghcr.io/observiq/bindplane-amd64:${{ env.GITHUB_SHA_SHORT }}-stage" \
                  "ghcr.io/observiq/bindplane-arm64:${{ env.GITHUB_SHA_SHORT }}-stage"
          docker manifest push "ghcr.io/observiq/bindplane:${{ env.GITHUB_SHA_SHORT }}-stage"
