definitions:
  model.AdditionalInfo:
    properties:
      documentation:
        items:
          $ref: '#/definitions/model.DocumentationLink'
        type: array
      message:
        type: string
    type: object
  model.Agent:
    properties:
      arch:
        type: string
      configuration:
        description: tracked by BindPlane
      configurationStatus:
        $ref: '#/definitions/model.ConfigurationVersions'
      connectedAt:
        type: string
      disconnectedAt:
        type: string
      errorMessage:
        type: string
      home:
        type: string
      hostname:
        type: string
      id:
        type: string
      labels:
        $ref: '#/definitions/model.Labels'
      macAddress:
        type: string
      name:
        type: string
      operatingSystem:
        type: string
      platform:
        type: string
      protocol:
        type: string
      remoteAddress:
        type: string
      reported_at:
        type: string
      state: {}
      status:
        allOf:
        - $ref: '#/definitions/model.AgentStatus'
        description: reported by Status messages
      tls:
        allOf:
        - $ref: '#/definitions/model.ManagerTLS'
        description: TLS from the agent's manager.yaml
      type:
        type: string
      upgrade:
        allOf:
        - $ref: '#/definitions/model.AgentUpgrade'
        description: Upgrade stores information about an agent upgrade
      version:
        type: string
    type: object
  model.AgentDownload:
    properties:
      hash:
        type: string
      url:
        type: string
    type: object
  model.AgentInstaller:
    properties:
      url:
        type: string
    type: object
  model.AgentLabelsPayload:
    properties:
      labels:
        additionalProperties:
          type: string
        type: object
    type: object
  model.AgentLabelsResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      labels:
        $ref: '#/definitions/model.Labels'
    type: object
  model.AgentResponse:
    properties:
      agent:
        $ref: '#/definitions/model.Agent'
    type: object
  model.AgentSelector:
    properties:
      matchLabels:
        $ref: '#/definitions/model.MatchLabels'
    type: object
  model.AgentStatus:
    enum:
    - 0
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - Disconnected
    - Connected
    - Error
    - ComponentFailed
    - Deleted
    - Configuring
    - Upgrading
  model.AgentUpgrade:
    properties:
      allPackagesHash:
        description: AllPackagesHash is the hash of the packages sent to the agent
          to upgrade
        items:
          type: integer
        type: array
      error:
        description: Error is set if there were errors upgrading the agent
        type: string
      status:
        allOf:
        - $ref: '#/definitions/model.AgentUpgradeStatus'
        description: Status indicates the progress of the agent upgrade
      version:
        description: |-
          Version is used to indicate that an agent should be or is being upgraded. The agent status will be set to Upgrading
          when the upgrade begins.
        type: string
    type: object
  model.AgentUpgradeStatus:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - UpgradePending
    - UpgradeStarted
    - UpgradeFailed
  model.AgentVersion:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.AgentVersionSpec'
        description: Spec TODO(doc)
      status:
        $ref: '#/definitions/model.NoStatus'
    type: object
  model.AgentVersionResponse:
    properties:
      agentVersion:
        $ref: '#/definitions/model.AgentVersion'
    type: object
  model.AgentVersionSpec:
    properties:
      download:
        additionalProperties:
          $ref: '#/definitions/model.AgentDownload'
        description: Map of platform to download URL and hash
        type: object
      draft:
        type: boolean
      installer:
        additionalProperties:
          $ref: '#/definitions/model.AgentInstaller'
        description: Map of platform to installer script URL
        type: object
      prerelease:
        type: boolean
      releaseDate:
        description: ReleaseDate is an RFC3339 encoded date in a string
        type: string
      releaseNotesURL:
        type: string
      type:
        type: string
      version:
        type: string
    type: object
  model.AgentVersionsResponse:
    properties:
      agentVersions:
        items:
          $ref: '#/definitions/model.AgentVersion'
        type: array
    type: object
  model.AgentsResponse:
    properties:
      agents:
        items:
          $ref: '#/definitions/model.Agent'
        type: array
    type: object
  model.AnyResource:
    type: object
  model.ApplyResponse:
    properties:
      updates:
        items:
          $ref: '#/definitions/model.ResourceStatus'
        type: array
    type: object
  model.BulkAgentLabelsResponse:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
  model.Configuration:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ConfigurationSpec'
        description: Spec contains the spec for the Configuration
      status:
        $ref: '#/definitions/model.ConfigurationStatus'
    type: object
  model.ConfigurationResponse:
    properties:
      configuration:
        $ref: '#/definitions/model.Configuration'
      raw:
        type: string
    type: object
  model.ConfigurationSpec:
    properties:
      contentType:
        type: string
      destinations:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
      raw:
        type: string
      selector:
        $ref: '#/definitions/model.AgentSelector'
      sources:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
    type: object
  model.ConfigurationStatus:
    properties:
      current:
        description: Current will be set to true on read if the configuration is the
          current version
        type: boolean
      currentVersion:
        allOf:
        - $ref: '#/definitions/model.Version'
        description: CurrentVersion is the version of the configuration that has most
          recently completed a rollout
      latest:
        description: Latest will be set to true on read if the configuration is the
          latest version
        type: boolean
      pending:
        description: Pending will be set to true on read if the configuration is the
          pending version
        type: boolean
      pendingVersion:
        allOf:
        - $ref: '#/definitions/model.Version'
        description: |-
          PendingVersion will be set to the version of a rollout that is in progress. It will be set to 0 when the rollout
          completes.
      rollout:
        allOf:
        - $ref: '#/definitions/model.Rollout'
        description: Rollout contains status for the rollout of this configuration
    type: object
  model.ConfigurationVersions:
    properties:
      current:
        description: Current is the configuration currently applied to the agent.
        type: string
      future:
        description: |-
          Future is the configuration that will be assigned to this agent when the rollout assigns the new configuration to
          the agent. Once the rollout assigns the configuration, Pending will be set to this value and this will be cleared.
        type: string
      pending:
        description: |-
          Pending is the configuration that is assigned to the agent but may not be applied. Once this configuration is
          confirmed, Current will be set to this value and this will be cleared.
        type: string
    type: object
  model.ConfigurationsResponse:
    properties:
      configurations:
        items:
          $ref: '#/definitions/model.Configuration'
        type: array
    type: object
  model.DeleteAgentsResponse:
    properties:
      agents:
        items:
          $ref: '#/definitions/model.Agent'
        type: array
    type: object
  model.DeleteResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      updates:
        items:
          $ref: '#/definitions/model.ResourceStatus'
        type: array
    type: object
  model.Destination:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ParameterizedSpec'
        description: Spec is the specification for the Destination containing the
          type and parameters
      status:
        $ref: '#/definitions/model.VersionStatus'
    type: object
  model.DestinationResponse:
    properties:
      destination:
        $ref: '#/definitions/model.Destination'
    type: object
  model.DestinationType:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        $ref: '#/definitions/model.ResourceTypeSpec'
      status:
        $ref: '#/definitions/model.VersionStatus'
    type: object
  model.DestinationTypeResponse:
    properties:
      destinationType:
        $ref: '#/definitions/model.DestinationType'
    type: object
  model.DestinationTypesResponse:
    properties:
      destinationTypes:
        items:
          $ref: '#/definitions/model.DestinationType'
        type: array
    type: object
  model.DestinationsResponse:
    properties:
      destinations:
        items:
          $ref: '#/definitions/model.Destination'
        type: array
    type: object
  model.DocumentationLink:
    properties:
      text:
        type: string
      url:
        type: string
    type: object
  model.HistoryResponse:
    properties:
      versions:
        items:
          $ref: '#/definitions/model.AnyResource'
        type: array
    type: object
  model.InstallCommandResponse:
    properties:
      command:
        type: string
    type: object
  model.Kind:
    enum:
    - Profile
    - Context
    - Configuration
    - Agent
    - AgentVersion
    - Source
    - Processor
    - Destination
    - SourceType
    - ProcessorType
    - DestinationType
    - Unknown
    - Rollout
    type: string
    x-enum-varnames:
    - KindProfile
    - KindContext
    - KindConfiguration
    - KindAgent
    - KindAgentVersion
    - KindSource
    - KindProcessor
    - KindDestination
    - KindSourceType
    - KindProcessorType
    - KindDestinationType
    - KindUnknown
    - KindRollout
  model.Labels:
    type: object
  model.ManagerTLS:
    properties:
      ca_file:
        type: string
      cert_file:
        type: string
      insecure_skip_verify:
        type: boolean
      key_file:
        type: string
    type: object
  model.MatchLabels:
    additionalProperties:
      type: string
    type: object
  model.Metadata:
    properties:
      additionalInfo:
        $ref: '#/definitions/model.AdditionalInfo'
      dateModified:
        type: string
      deprecated:
        description: |-
          Deprecated indicates that this resource is deprecated and should not be used. Deprecated resources should contain
          additional information about why the resource is deprecated and what should be used instead.
        type: boolean
      description:
        type: string
      displayName:
        type: string
      hash:
        description: Hash is a hex formatted sha256 Hash of the json-encoded spec
          that is used to determine if the spec has changed.
        type: string
      icon:
        type: string
      id:
        type: string
      labels:
        $ref: '#/definitions/model.Labels'
      name:
        type: string
      version:
        allOf:
        - $ref: '#/definitions/model.Version'
        description: Version is a 1-based integer that is incremented each time the
          spec is changed.
    type: object
  model.MetricCategory:
    properties:
      column:
        description: 0 or 1
        type: integer
      label:
        type: string
      metrics:
        items:
          $ref: '#/definitions/model.MetricOption'
        type: array
    type: object
  model.MetricOption:
    properties:
      defaultDisabled:
        type: boolean
      description:
        type: string
      kpi:
        type: boolean
      name:
        type: string
    type: object
  model.NoStatus:
    type: object
  model.Parameter:
    properties:
      name:
        description: Name is the name of the parameter
        type: string
      sensitive:
        description: Sensitive will be true if the value is sensitive and should be
          masked when printed.
        type: boolean
      value:
        description: 'Value could be any of the following: string, bool, int, enum
          (string), float, []string, map'
    type: object
  model.ParameterDefinition:
    properties:
      advancedConfig:
        type: boolean
      default:
        description: Must be valid according to Type & ValidValues
      description:
        type: string
      documentation:
        items:
          $ref: '#/definitions/model.DocumentationLink'
        type: array
      hidden:
        type: boolean
      label:
        type: string
      name:
        type: string
      options:
        $ref: '#/definitions/model.ParameterOptions'
      relevantIf:
        items:
          $ref: '#/definitions/model.RelevantIfCondition'
        type: array
      required:
        type: boolean
      type:
        description: '"string", "int", "bool", "strings", or "enum"'
        type: string
      validValues:
        description: only useable if Type == "enum"
        items:
          type: string
        type: array
    type: object
  model.ParameterOptions:
    properties:
      creatable:
        description: |-
          Creatable will modify the "enum" parameter from a select to
          a creatable select where a user can specify a custom value
        type: boolean
      gridColumns:
        description: |-
          GridColumns will specify the number of flex-grid columns the
          control will take up, must be an integer between 1 and 12 or
          unspecified.
        type: integer
      horizontalDivider:
        description: |-
          HorizontalDivider will add a horizontal divider after the parameter at full
          width of the form.
        type: boolean
      labels:
        additionalProperties:
          type: string
        description: |-
          Labels indicate labels that can be used when rendering the parameter. This was added for the "map" parameter type
          to make the "key" and "value" labels configurable.
        type: object
      metricCategories:
        items:
          $ref: '#/definitions/model.MetricCategory'
        type: array
      multiline:
        description: Multiline indicates that a multiline textarea should be used
          for editing a "string" parameter.
        type: boolean
      password:
        description: |-
          Password indicates the string field is for a password and will be hidden by the UI.
          Only applies to string parameters.
          Deprecated, use Sensitive instead.
        type: boolean
      sectionHeader:
        description: |-
          SectionHeader is used to indicate that the bool parameter input is
          a switch for further configuration for UI styling.
        type: boolean
      sensitive:
        description: Sensitive indicates that the field is sensitive and will be masked
          with (sensitive) in the response.
        type: boolean
      subHeader:
        description: SubHeader will place a subheader above the parameter.
        type: string
      trackUnchecked:
        description: |-
          TrackUnchecked will modify the "enums" parameter to store the
          unchecked values as the value.
        type: boolean
    type: object
  model.ParameterizedSpec:
    properties:
      disabled:
        type: boolean
      parameters:
        items:
          $ref: '#/definitions/model.Parameter'
        type: array
      processors:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
      type:
        type: string
    type: object
  model.PatchAgentVersionsRequest:
    properties:
      ids:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  model.PhaseAgentCount:
    properties:
      initial:
        type: integer
      maximum:
        type: integer
      multiplier:
        type: number
    type: object
  model.PostAgentVersionRequest:
    properties:
      version:
        type: string
    type: object
  model.Processor:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ParameterizedSpec'
        description: Spec is the specification for the Processor containing the type
          and parameters
      status:
        $ref: '#/definitions/model.VersionStatus'
    type: object
  model.ProcessorResponse:
    properties:
      processor:
        $ref: '#/definitions/model.Processor'
    type: object
  model.ProcessorType:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        $ref: '#/definitions/model.ResourceTypeSpec'
      status:
        $ref: '#/definitions/model.VersionStatus'
    type: object
  model.ProcessorTypeResponse:
    properties:
      processorType:
        $ref: '#/definitions/model.ProcessorType'
    type: object
  model.ProcessorTypesResponse:
    properties:
      processorTypes:
        items:
          $ref: '#/definitions/model.ProcessorType'
        type: array
    type: object
  model.ProcessorsResponse:
    properties:
      processors:
        items:
          $ref: '#/definitions/model.Processor'
        type: array
    type: object
  model.RelevantIfCondition:
    properties:
      name:
        type: string
      operator:
        type: string
      value: {}
    type: object
  model.ResourceConfiguration:
    properties:
      disabled:
        type: boolean
      displayName:
        description: DisplayName is a friendly name of the resource that will be displayed
          in the UI
        type: string
      id:
        description: ID will be generated and is used to uniquely identify the resource
        type: string
      name:
        description: Name must be specified if this is a reference to another resource
          by name
        type: string
      parameters:
        items:
          $ref: '#/definitions/model.Parameter'
        type: array
      processors:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
      type:
        type: string
    type: object
  model.ResourceStatus:
    properties:
      reason:
        description: Reason will be set if status is invalid or error
        type: string
      resource:
        description: Resource is the resource that was updated
      status:
        allOf:
        - $ref: '#/definitions/model.UpdateStatus'
        description: Status is the status of the resource after the update
    type: object
  model.ResourceTypeOutput:
    properties:
      exporters:
        type: string
      extensions:
        type: string
      processors:
        type: string
      receivers:
        type: string
    type: object
  model.ResourceTypeSpec:
    properties:
      logs:
        allOf:
        - $ref: '#/definitions/model.ResourceTypeOutput'
        description: individual
      logs+metrics:
        allOf:
        - $ref: '#/definitions/model.ResourceTypeOutput'
        description: pairs (alphabetical order)
      logs+metrics+traces:
        allOf:
        - $ref: '#/definitions/model.ResourceTypeOutput'
        description: all three (alphabetical order)
      logs+traces:
        $ref: '#/definitions/model.ResourceTypeOutput'
      metrics:
        $ref: '#/definitions/model.ResourceTypeOutput'
      metrics+traces:
        $ref: '#/definitions/model.ResourceTypeOutput'
      parameters:
        description: |-
          Parameters currently uses the model from stanza. Eventually we will probably create a separate definition for
          BindPlane.
        items:
          $ref: '#/definitions/model.ParameterDefinition'
        type: array
      supportedPlatforms:
        items:
          type: string
        type: array
      traces:
        $ref: '#/definitions/model.ResourceTypeOutput'
      version:
        type: string
    type: object
  model.Rollout:
    properties:
      name:
        description: Name will be set to the Name of the configuration when requested
          via Configuration.Rollout()
        type: string
      options:
        allOf:
        - $ref: '#/definitions/model.RolloutOptions'
        description: Options are set when the Rollout is created based on the rollout
          options specified in the configuration
      phase:
        description: Phase starts at zero and increments until all agents are updated.
          In each phase, initial*multiplier^phase agents will be updated.
        type: integer
      progress:
        allOf:
        - $ref: '#/definitions/model.RolloutProgress'
        description: Progress is the current progress of the rollout
      status:
        allOf:
        - $ref: '#/definitions/model.RolloutStatus'
        description: Status is the status of the rollout
    type: object
  model.RolloutOptions:
    properties:
      maxErrors:
        description: MaxErrors is the maximum number of failed agents before the rollout
          will be considered an error
        type: integer
      phaseAgentCount:
        allOf:
        - $ref: '#/definitions/model.PhaseAgentCount'
        description: PhaseAgentCount determines the rate at which agents will be updated
          during a rollout.
      rollbackOnFailure:
        description: |-
          RollbackOnFailure determines if the rollout should be rolled back to the previous configuration if the rollout
          fails.
        type: boolean
      startAutomatically:
        description: |-
          StartAutomatically determines if this rollout transitions immediately from RolloutStatusPending to
          RolloutStatusStarted without requiring that it be started manually.
        type: boolean
    type: object
  model.RolloutProgress:
    properties:
      completed:
        description: Completed is the number of agents with new version with Connected
          status
        type: integer
      errors:
        description: Errors is the number of agents with new version with Error Status
        type: integer
      pending:
        description: Pending is the number of agents that are currently being configured
        type: integer
      waiting:
        description: Waiting is the number of agents that need to be scheduled for
          configuration
        type: integer
    type: object
  model.RolloutStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - RolloutStatusPending
    - RolloutStatusStarted
    - RolloutStatusPaused
    - RolloutStatusError
    - RolloutStatusStable
    - RolloutStatusReplaced
  model.Source:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ParameterizedSpec'
        description: Spec is the specification for the Source that contains the type
          and parameters
      status:
        $ref: '#/definitions/model.VersionStatus'
    type: object
  model.SourceResponse:
    properties:
      source:
        $ref: '#/definitions/model.Source'
    type: object
  model.SourceType:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        $ref: '#/definitions/model.ResourceTypeSpec'
      status:
        $ref: '#/definitions/model.VersionStatus'
    type: object
  model.SourceTypeResponse:
    properties:
      sourceType:
        $ref: '#/definitions/model.SourceType'
    type: object
  model.SourceTypesResponse:
    properties:
      sourceTypes:
        items:
          $ref: '#/definitions/model.SourceType'
        type: array
    type: object
  model.SourcesResponse:
    properties:
      sources:
        items:
          $ref: '#/definitions/model.Source'
        type: array
    type: object
  model.UpdateStatus:
    enum:
    - unchanged
    - configured
    - created
    - deleted
    - invalid
    - error
    - in-use
    - forbidden
    - deprecated
    type: string
    x-enum-varnames:
    - StatusUnchanged
    - StatusConfigured
    - StatusCreated
    - StatusDeleted
    - StatusInvalid
    - StatusError
    - StatusInUse
    - StatusForbidden
    - StatusDeprecated
  model.Version:
    enum:
    - -2
    - -1
    - 0
    type: integer
    x-enum-varnames:
    - VersionPending
    - VersionCurrent
    - VersionLatest
  model.VersionStatus:
    properties:
      latest:
        type: boolean
    type: object
  rest.ErrorResponse:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
paths:
  /{kind}/{name}/history:
    get:
      parameters:
      - description: the kind of the resource
        in: path
        name: kind
        required: true
        type: string
      - description: the name of the resource
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HistoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get the history of a resource
  /agent-versions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentVersionsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List agent versions
  /agent-versions/{name}:
    delete:
      parameters:
      - description: the name of the agent version to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete agent version by name
    get:
      parameters:
      - description: the name of the agent version
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentVersionResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get agent version by name
  /agent-versions/{version}/install-command:
    get:
      description: Get the proper install command for the provided parameters.
      parameters:
      - description: 2.1.1
        in: path
        name: version
        required: true
        type: string
      - description: uuid
        in: query
        name: secret-key
        type: string
      - description: http%3A%2F%2Flocalhost%3A3001
        in: query
        name: remote-url
        type: string
      - description: windows-amd64
        in: query
        name: platform
        type: string
      - description: env=stage,app=bindplane
        in: query
        name: labels
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.InstallCommandResponse'
      summary: Get Install Command
  /agent-versions/{version}/sync:
    post:
      description: Create an agent-version from the contents of a github release.
      parameters:
      - description: 2.1.1
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApplyResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Sync Agent Version
  /agents:
    delete:
      parameters:
      - description: list of agent ids to delete
        in: body
        name: id
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DeleteAgentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete agents by ids
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List Agents
  /agents/{id}:
    get:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get agent by id
  /agents/{id}/configuration:
    get:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get configuration for a given agent
  /agents/{id}/labels:
    get:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentLabelsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get agent labels by agent id
    patch:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      - description: if true, overwrite any existing labels with the same names
        in: query
        name: overwrite
        type: string
      - description: Labels to be merged with existing labels, empty values will delete
          existing labels
        in: body
        name: labels
        required: true
        schema:
          $ref: '#/definitions/model.AgentLabelsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentLabelsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Patch agent labels by agent id
  /agents/{id}/restart:
    put:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: TODO restart agent
  /agents/{id}/version:
    post:
      parameters:
      - description: the id of the agent
        in: path
        name: name
        required: true
        type: string
      - description: request body containing version
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.PostAgentVersionRequest'
      produces:
      - application/json
      responses:
        "409":
          description: If the agent does not support upgrade
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Upgrade agent
  /agents/labels:
    patch:
      parameters:
      - description: agent IDs
        in: body
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
      - description: labels to apply
        in: body
        name: labels
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      - description: overwrite labels
        in: body
        name: labels
        schema:
          type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BulkAgentLabelsResponse'
      summary: Bulk apply labels to agents
  /agents/version:
    patch:
      parameters:
      - description: request body containing ids and version
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.PatchAgentVersionsRequest'
      responses: {}
      summary: Update multiple agents
  /apply:
    post:
      description: |-
        The /apply route will try to parse resources
        and upsert them into the store.  Additionally
        it will send reconfigure tasks to affected agents.
      parameters:
      - description: Resources
        in: body
        name: resources
        required: true
        schema:
          items:
            $ref: '#/definitions/model.AnyResource'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApplyResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create, edit, and configure multiple resources.
  /configurations:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List Configurations
  /configurations/{name}:
    delete:
      parameters:
      - description: the name of the configuration to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete configuration by name
    get:
      parameters:
      - description: the name of the Configuration
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get Configuration by name
  /configurations/{name}/copy:
    post:
      parameters:
      - description: the name of the configuration to duplicate
        in: path
        name: name
        required: true
        type: string
      - description: the desired name of the duplicate configuration
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successful Copy, created
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Duplicate an existing configuration
  /delete:
    post:
      description: |-
        /delete endpoint will try to parse resources
        and delete them from the store.  Additionally
        it will send reconfigure tasks to affected agents.
      parameters:
      - description: Resources
        in: body
        name: resources
        required: true
        schema:
          items:
            $ref: '#/definitions/model.AnyResource'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DeleteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete multiple resources
  /destination-types:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationTypesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List destination types
  /destination-types/{name}:
    delete:
      parameters:
      - description: the name of the destination type to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete destination type by name
    get:
      parameters:
      - description: the name of the destination type
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationTypeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get destination type by name
  /destinations:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List Destinations
  /destinations/{name}:
    delete:
      parameters:
      - description: the name of the destination to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete destination by name
    get:
      parameters:
      - description: the name of the Destination
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get Destination by name
  /processor-types:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorTypesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List processor types
  /processor-types/{name}:
    delete:
      parameters:
      - description: the name of the processor type to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete processor type by name
    get:
      parameters:
      - description: the name of the processor type
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorTypeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get processor type by name
  /processors:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List Processors
  /processors/{name}:
    delete:
      parameters:
      - description: the name of the processor to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete processor by name
    get:
      parameters:
      - description: the name of the Processor
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get Processor by name
  /rollouts:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get all rollouts
    post:
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.ConfigurationsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update all active rollouts
  /rollouts/{name}:
    get:
      parameters:
      - description: the name of the configuration
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get rollout configuration by name
  /rollouts/{name}/pause:
    post:
      parameters:
      - description: the name of the configuration
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Pause rollout by configuration name
  /rollouts/{name}/resume:
    post:
      parameters:
      - description: the name of the configuration
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Resume rollout by configuration name
  /rollouts/{name}/start:
    post:
      parameters:
      - description: the name of the configuration
        in: path
        name: name
        required: true
        type: string
      - description: the options for the rollout
        in: body
        name: options
        schema:
          $ref: '#/definitions/model.RolloutOptions'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Start rollout by configuration name
  /rollouts/{name}/status:
    get:
      parameters:
      - description: the name of the configuration
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Status of configuration rollout by name
  /rollouts/{name}/update:
    post:
      parameters:
      - description: the name of the configuration
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update rollout by configuration name
  /source-types:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourceTypesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List source types
  /source-types/{name}:
    delete:
      parameters:
      - description: the name of the source type to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete source type by name
    get:
      parameters:
      - description: the name of the source type
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourceTypeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get source type by name
  /sources:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourcesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List Sources
  /sources/{name}:
    delete:
      parameters:
      - description: the name of the source to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete source by name
    get:
      parameters:
      - description: the name of the Source
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get Source by name
  /version:
    get:
      description: Returns the current bindplane version of the server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Server version
swagger: "2.0"
