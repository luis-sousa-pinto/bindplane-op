definitions:
  model.Agent:
    properties:
      arch:
        type: string
      configuration:
        description: tracked by BindPlane
      connectedAt:
        type: string
      disconnectedAt:
        type: string
      errorMessage:
        type: string
      home:
        type: string
      hostname:
        type: string
      id:
        type: string
      labels:
        $ref: '#/definitions/model.Labels'
      macAddress:
        type: string
      name:
        type: string
      operatingSystem:
        type: string
      platform:
        type: string
      protocol:
        description: used by the agent management protocol
        type: string
      remoteAddress:
        type: string
      state: {}
      status:
        allOf:
        - $ref: '#/definitions/model.AgentStatus'
        description: reported by Status messages
      tls:
        allOf:
        - $ref: '#/definitions/model.ManagerTLS'
        description: TLS from the agent's manager.yaml
      type:
        type: string
      upgrade:
        allOf:
        - $ref: '#/definitions/model.AgentUpgrade'
        description: Upgrade stores information about an agent upgrade
      version:
        type: string
    type: object
  model.AgentDownload:
    properties:
      hash:
        type: string
      url:
        type: string
    type: object
  model.AgentInstaller:
    properties:
      url:
        type: string
    type: object
  model.AgentLabelsPayload:
    properties:
      labels:
        additionalProperties:
          type: string
        type: object
    type: object
  model.AgentLabelsResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      labels:
        $ref: '#/definitions/model.Labels'
    type: object
  model.AgentResponse:
    properties:
      agent:
        $ref: '#/definitions/model.Agent'
    type: object
  model.AgentSelector:
    properties:
      matchLabels:
        $ref: '#/definitions/model.MatchLabels'
    type: object
  model.AgentStatus:
    enum:
    - 0
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - Disconnected
    - Connected
    - Error
    - ComponentFailed
    - Deleted
    - Configuring
    - Upgrading
  model.AgentUpgrade:
    properties:
      allPackagesHash:
        description: AllPackagesHash is the hash of the packages sent to the agent
          to upgrade
        items:
          type: integer
        type: array
      error:
        description: Error is set if there were errors upgrading the agent
        type: string
      status:
        allOf:
        - $ref: '#/definitions/model.AgentUpgradeStatus'
        description: Status indicates the progress of the agent upgrade
      version:
        description: |-
          Version is used to indicate that an agent should be or is being upgraded. The agent status will be set to Upgrading
          when the upgrade begins.
        type: string
    type: object
  model.AgentUpgradeStatus:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - UpgradePending
    - UpgradeStarted
    - UpgradeFailed
  model.AgentVersion:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.AgentVersionSpec'
        description: Spec TODO(doc)
    type: object
  model.AgentVersionResponse:
    properties:
      agentVersion:
        $ref: '#/definitions/model.AgentVersion'
    type: object
  model.AgentVersionSpec:
    properties:
      download:
        additionalProperties:
          $ref: '#/definitions/model.AgentDownload'
        type: object
      draft:
        type: boolean
      installer:
        additionalProperties:
          $ref: '#/definitions/model.AgentInstaller'
        type: object
      prerelease:
        type: boolean
      releaseDate:
        description: ReleaseDate is an RFC3339 encoded date in a string
        type: string
      releaseNotesURL:
        type: string
      type:
        type: string
      version:
        type: string
    type: object
  model.AgentVersionsResponse:
    properties:
      agentVersions:
        items:
          $ref: '#/definitions/model.AgentVersion'
        type: array
    type: object
  model.AgentsResponse:
    properties:
      agents:
        items:
          $ref: '#/definitions/model.Agent'
        type: array
    type: object
  model.AnyResource:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        additionalProperties: true
        type: object
    type: object
  model.ApplyResponse:
    properties:
      updates:
        items:
          $ref: '#/definitions/model.ResourceStatus'
        type: array
    type: object
  model.BulkAgentLabelsResponse:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
  model.Configuration:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ConfigurationSpec'
        description: Spec TODO(doc)
    type: object
  model.ConfigurationResponse:
    properties:
      configuration:
        $ref: '#/definitions/model.Configuration'
      raw:
        type: string
    type: object
  model.ConfigurationSpec:
    properties:
      contentType:
        type: string
      destinations:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
      raw:
        type: string
      selector:
        $ref: '#/definitions/model.AgentSelector'
      sources:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
    type: object
  model.ConfigurationsResponse:
    properties:
      configurations:
        items:
          $ref: '#/definitions/model.Configuration'
        type: array
    type: object
  model.DeleteAgentsResponse:
    properties:
      agents:
        items:
          $ref: '#/definitions/model.Agent'
        type: array
    type: object
  model.DeleteResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      updates:
        items:
          $ref: '#/definitions/model.ResourceStatus'
        type: array
    type: object
  model.Destination:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ParameterizedSpec'
        description: Spec TODO(doc)
    type: object
  model.DestinationResponse:
    properties:
      destination:
        $ref: '#/definitions/model.Destination'
    type: object
  model.DestinationType:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        $ref: '#/definitions/model.ResourceTypeSpec'
    type: object
  model.DestinationTypeResponse:
    properties:
      destinationType:
        $ref: '#/definitions/model.DestinationType'
    type: object
  model.DestinationTypesResponse:
    properties:
      destinationTypes:
        items:
          $ref: '#/definitions/model.DestinationType'
        type: array
    type: object
  model.DestinationsResponse:
    properties:
      destinations:
        items:
          $ref: '#/definitions/model.Destination'
        type: array
    type: object
  model.DocumentationLink:
    properties:
      text:
        type: string
      url:
        type: string
    type: object
  model.InstallCommandResponse:
    properties:
      command:
        type: string
    type: object
  model.Kind:
    enum:
    - Profile
    - Context
    - Configuration
    - Agent
    - AgentVersion
    - Source
    - Processor
    - Destination
    - SourceType
    - ProcessorType
    - DestinationType
    - Unknown
    type: string
    x-enum-varnames:
    - KindProfile
    - KindContext
    - KindConfiguration
    - KindAgent
    - KindAgentVersion
    - KindSource
    - KindProcessor
    - KindDestination
    - KindSourceType
    - KindProcessorType
    - KindDestinationType
    - KindUnknown
  model.Labels:
    type: object
  model.ManagerTLS:
    properties:
      ca_file:
        type: string
      cert_file:
        type: string
      insecure_skip_verify:
        type: boolean
      key_file:
        type: string
    type: object
  model.MatchLabels:
    additionalProperties:
      type: string
    type: object
  model.Metadata:
    properties:
      description:
        type: string
      displayName:
        type: string
      icon:
        type: string
      id:
        type: string
      labels:
        $ref: '#/definitions/model.Labels'
      name:
        type: string
    type: object
  model.MetricCategory:
    properties:
      column:
        description: 0 or 1
        type: integer
      label:
        type: string
      metrics:
        items:
          $ref: '#/definitions/model.MetricOption'
        type: array
    type: object
  model.MetricOption:
    properties:
      defaultDisabled:
        type: boolean
      description:
        type: string
      kpi:
        type: boolean
      name:
        type: string
    type: object
  model.Parameter:
    properties:
      name:
        type: string
      value:
        description: 'This could be any of the following: string, bool, int, enum
          (string), float, []string'
    type: object
  model.ParameterDefinition:
    properties:
      advancedConfig:
        type: boolean
      default:
        description: Must be valid according to Type & ValidValues
      description:
        type: string
      documentation:
        items:
          $ref: '#/definitions/model.DocumentationLink'
        type: array
      hidden:
        type: boolean
      label:
        type: string
      name:
        type: string
      options:
        $ref: '#/definitions/model.ParameterOptions'
      relevantIf:
        items:
          $ref: '#/definitions/model.RelevantIfCondition'
        type: array
      required:
        type: boolean
      type:
        description: '"string", "int", "bool", "strings", or "enum"'
        type: string
      validValues:
        description: only useable if Type == "enum"
        items:
          type: string
        type: array
    type: object
  model.ParameterOptions:
    properties:
      creatable:
        description: |-
          Creatable will modify the "enum" parameter from a select to
          a creatable select where a user can specify a custom value
        type: boolean
      gridColumns:
        description: |-
          GridColumns will specify the number of flex-grid columns the
          control will take up, must be an integer between 1 and 12 or
          unspecified.
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Labels indicate labels that can be used when rendering the parameter. This was added for the "map" parameter type
          to make the "key" and "value" labels configurable.
        type: object
      metricCategories:
        items:
          $ref: '#/definitions/model.MetricCategory'
        type: array
      multiline:
        description: Multiline indicates that a multiline textarea should be used
          for editing a "string" parameter.
        type: boolean
      password:
        description: |-
          Password indicates the string field is for a password and will be hidden by the UI.
          Only applies to string parameters.
        type: boolean
      sectionHeader:
        description: |-
          SectionHeader is used to indicate that the bool parameter input is
          a switch for further configuration for UI styling.
        type: boolean
      trackUnchecked:
        description: |-
          TrackUnchecked will modify the "enums" parameter to store the
          unchecked values as the value.
        type: boolean
    type: object
  model.ParameterizedSpec:
    properties:
      disabled:
        type: boolean
      parameters:
        items:
          $ref: '#/definitions/model.Parameter'
        type: array
      processors:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
      type:
        type: string
    type: object
  model.PatchAgentVersionsRequest:
    properties:
      ids:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  model.PostAgentVersionRequest:
    properties:
      version:
        type: string
    type: object
  model.Processor:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ParameterizedSpec'
        description: Spec TODO(doc)
    type: object
  model.ProcessorResponse:
    properties:
      processor:
        $ref: '#/definitions/model.Processor'
    type: object
  model.ProcessorType:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        $ref: '#/definitions/model.ResourceTypeSpec'
    type: object
  model.ProcessorTypeResponse:
    properties:
      processorType:
        $ref: '#/definitions/model.ProcessorType'
    type: object
  model.ProcessorTypesResponse:
    properties:
      processorTypes:
        items:
          $ref: '#/definitions/model.ProcessorType'
        type: array
    type: object
  model.ProcessorsResponse:
    properties:
      processors:
        items:
          $ref: '#/definitions/model.Processor'
        type: array
    type: object
  model.RelevantIfCondition:
    properties:
      name:
        type: string
      operator:
        type: string
      value: {}
    type: object
  model.ResourceConfiguration:
    properties:
      disabled:
        type: boolean
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/model.Parameter'
        type: array
      processors:
        items:
          $ref: '#/definitions/model.ResourceConfiguration'
        type: array
      type:
        type: string
    type: object
  model.ResourceStatus:
    properties:
      reason:
        description: Reason will be set if status is invalid or error
        type: string
      resource:
        description: Resource TODO(doc)
      status:
        allOf:
        - $ref: '#/definitions/model.UpdateStatus'
        description: Status TODO(doc)
    type: object
  model.ResourceTypeOutput:
    properties:
      exporters:
        type: string
      extensions:
        type: string
      processors:
        type: string
      receivers:
        type: string
    type: object
  model.ResourceTypeSpec:
    properties:
      logs:
        allOf:
        - $ref: '#/definitions/model.ResourceTypeOutput'
        description: individual
      logs+metrics:
        allOf:
        - $ref: '#/definitions/model.ResourceTypeOutput'
        description: pairs (alphabetical order)
      logs+metrics+traces:
        allOf:
        - $ref: '#/definitions/model.ResourceTypeOutput'
        description: all three (alphabetical order)
      logs+traces:
        $ref: '#/definitions/model.ResourceTypeOutput'
      metrics:
        $ref: '#/definitions/model.ResourceTypeOutput'
      metrics+traces:
        $ref: '#/definitions/model.ResourceTypeOutput'
      parameters:
        description: |-
          Parameters currently uses the model from stanza. Eventually we will probably create a separate definition for
          BindPlane.
        items:
          $ref: '#/definitions/model.ParameterDefinition'
        type: array
      supportedPlatforms:
        items:
          type: string
        type: array
      traces:
        $ref: '#/definitions/model.ResourceTypeOutput'
      version:
        type: string
    type: object
  model.Source:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        allOf:
        - $ref: '#/definitions/model.ParameterizedSpec'
        description: Spec TODO(doc)
    type: object
  model.SourceResponse:
    properties:
      source:
        $ref: '#/definitions/model.Source'
    type: object
  model.SourceType:
    properties:
      apiVersion:
        type: string
      kind:
        $ref: '#/definitions/model.Kind'
      metadata:
        $ref: '#/definitions/model.Metadata'
      spec:
        $ref: '#/definitions/model.ResourceTypeSpec'
    type: object
  model.SourceTypeResponse:
    properties:
      sourceType:
        $ref: '#/definitions/model.SourceType'
    type: object
  model.SourceTypesResponse:
    properties:
      sourceTypes:
        items:
          $ref: '#/definitions/model.SourceType'
        type: array
    type: object
  model.SourcesResponse:
    properties:
      sources:
        items:
          $ref: '#/definitions/model.Source'
        type: array
    type: object
  model.UpdateStatus:
    enum:
    - unchanged
    - configured
    - created
    - deleted
    - invalid
    - error
    - in-use
    type: string
    x-enum-varnames:
    - StatusUnchanged
    - StatusConfigured
    - StatusCreated
    - StatusDeleted
    - StatusInvalid
    - StatusError
    - StatusInUse
  rest.ErrorResponse:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
paths:
  /agent-versions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentVersionsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List agent versions
  /agent-versions/{name}:
    delete:
      parameters:
      - description: the name of the agent version to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete agent version by name
    get:
      parameters:
      - description: the name of the agent version
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentVersionResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get agent version by name
  /agent-versions/{version}/install-command:
    get:
      description: Get the proper install command for the provided parameters.
      parameters:
      - description: 2.1.1
        in: path
        name: version
        required: true
        type: string
      - description: uuid
        in: query
        name: secret-key
        type: string
      - description: http%3A%2F%2Flocalhost%3A3001
        in: query
        name: remote-url
        type: string
      - description: windows-amd64
        in: query
        name: platform
        type: string
      - description: env=stage,app=bindplane
        in: query
        name: labels
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.InstallCommandResponse'
      summary: Get Install Command
  /agent-versions/{version}/sync:
    post:
      description: Create an agent-version from the contents of a github release.
      parameters:
      - description: 2.1.1
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApplyResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Sync Agent Version
  /agents:
    delete:
      parameters:
      - description: list of agent ids to delete
        in: body
        name: id
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DeleteAgentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: delete agents by ids
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List agents
  /agents/{id}:
    get:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get agent by id
  /agents/{id}/configuration:
    get:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get configuration for a given agent
  /agents/{id}/labels:
    get:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentLabelsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get agent labels by agent id
    patch:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      - description: if true, overwrite any existing labels with the same names
        in: query
        name: overwrite
        type: string
      - description: Labels to be merged with existing labels, empty values will delete
          existing labels
        in: body
        name: labels
        required: true
        schema:
          $ref: '#/definitions/model.AgentLabelsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AgentLabelsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Patch agent labels by agent id
  /agents/{id}/restart:
    put:
      parameters:
      - description: the id of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: TODO restart agent
  /agents/{id}/version:
    post:
      parameters:
      - description: the id of the agent
        in: path
        name: name
        required: true
        type: string
      - description: request body containing version
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.PostAgentVersionRequest'
      produces:
      - application/json
      responses:
        "409":
          description: If the agent does not support upgrade
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Upgrade agent
  /agents/labels:
    patch:
      parameters:
      - description: agent IDs
        in: body
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
      - description: labels to apply
        in: body
        name: labels
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      - description: overwrite labels
        in: body
        name: labels
        schema:
          type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BulkAgentLabelsResponse'
      summary: Bulk apply labels to agents
  /agents/version:
    patch:
      parameters:
      - description: request body containing ids and version
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.PatchAgentVersionsRequest'
      responses: {}
      summary: Update multiple agents
  /apply:
    post:
      description: |-
        The /apply route will try to parse resources
        and upsert them into the store.  Additionally
        it will send reconfigure tasks to affected agents.
      parameters:
      - description: Resources
        in: body
        name: resources
        required: true
        schema:
          items:
            $ref: '#/definitions/model.AnyResource'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApplyResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create, edit, and configure multiple resources.
  /configurations:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List Configurations
  /configurations/{name}:
    delete:
      parameters:
      - description: the name of the configuration to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete configuration by name
    get:
      parameters:
      - description: the name of the configuration
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ConfigurationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get configuration by name
  /configurations/{name}/copy:
    post:
      parameters:
      - description: the name of the configuration to duplicate
        in: path
        name: name
        required: true
        type: string
      - description: the desired name of the duplicate configuration
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successful Copy, created
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Duplicate an existing configuration
  /delete:
    post:
      description: |-
        /delete endpoint will try to parse resources
        and delete them from the store.  Additionally
        it will send reconfigure tasks to affected agents.
      parameters:
      - description: Resources
        in: body
        name: resources
        required: true
        schema:
          items:
            $ref: '#/definitions/model.AnyResource'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DeleteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete multiple resources
  /destination-types:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationTypesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List destination types
  /destination-types/{name}:
    delete:
      parameters:
      - description: the name of the destination type to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete destination type by name
    get:
      parameters:
      - description: the name of the destination type
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationTypeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get destination type by name
  /destinations:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List destinations
  /destinations/{name}:
    delete:
      parameters:
      - description: the name of the destination to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete destination by name
    get:
      parameters:
      - description: the name of the destination
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DestinationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get destination by name
  /processor-types:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorTypesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List processor types
  /processor-types/{name}:
    delete:
      parameters:
      - description: the name of the processor type to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete processor type by name
    get:
      parameters:
      - description: the name of the processor type
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorTypeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get processor type by name
  /processors:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List processors
  /processors/{name}:
    delete:
      parameters:
      - description: the name of the processor to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete processor by name
    get:
      parameters:
      - description: the name of the processor
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProcessorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get processor by name
  /source-types:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourceTypesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List source types
  /source-types/{name}:
    delete:
      parameters:
      - description: the name of the source type to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete source type by name
    get:
      parameters:
      - description: the name of the source type
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourceTypeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get source type by name
  /sources:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourcesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: List sources
  /sources/{name}:
    delete:
      parameters:
      - description: the name of the source to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful Delete, no content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete source by name
    get:
      parameters:
      - description: the name of the source
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SourceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Get source by name
  /version:
    get:
      description: Returns the current bindplane version of the server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Server version
swagger: "2.0"
