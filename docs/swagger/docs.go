// Code generated by swaggo/swag. DO NOT EDIT.

package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/agent-versions": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List agent versions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentVersionsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agent-versions/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get agent version by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the agent version",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentVersionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete agent version by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the agent version to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agent-versions/{version}/install-command": {
            "get": {
                "description": "Get the proper install command for the provided parameters.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Install Command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "2.1.1",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "secret-key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "http%3A%2F%2Flocalhost%3A3001",
                        "name": "remote-url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "windows-amd64",
                        "name": "platform",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "env=stage,app=bindplane",
                        "name": "labels",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.InstallCommandResponse"
                        }
                    }
                }
            }
        },
        "/agent-versions/{version}/sync": {
            "post": {
                "description": "Create an agent-version from the contents of a github release.",
                "produces": [
                    "application/json"
                ],
                "summary": "Sync Agent Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "2.1.1",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ApplyResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List agents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "delete agents by ids",
                "parameters": [
                    {
                        "description": "list of agent ids to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DeleteAgentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/labels": {
            "patch": {
                "produces": [
                    "application/json"
                ],
                "summary": "Bulk apply labels to agents",
                "parameters": [
                    {
                        "description": "agent IDs",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "labels to apply",
                        "name": "labels",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "overwrite labels",
                        "name": "labels",
                        "in": "body",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BulkAgentLabelsResponse"
                        }
                    }
                }
            }
        },
        "/agents/version": {
            "patch": {
                "summary": "Update multiple agents",
                "parameters": [
                    {
                        "description": "request body containing ids and version",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PatchAgentVersionsRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/agents/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get agent by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}/configuration": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get configuration for a given agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}/labels": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get agent labels by agent id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentLabelsResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "produces": [
                    "application/json"
                ],
                "summary": "Patch agent labels by agent id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "if true, overwrite any existing labels with the same names",
                        "name": "overwrite",
                        "in": "query"
                    },
                    {
                        "description": "Labels to be merged with existing labels, empty values will delete existing labels",
                        "name": "labels",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AgentLabelsPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AgentLabelsResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}/restart": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "summary": "TODO restart agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/agents/{id}/version": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Upgrade agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the agent",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body containing version",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostAgentVersionRequest"
                        }
                    }
                ],
                "responses": {
                    "409": {
                        "description": "If the agent does not support upgrade",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/apply": {
            "post": {
                "description": "The /apply route will try to parse resources\nand upsert them into the store.  Additionally\nit will send reconfigure tasks to affected agents.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create, edit, and configure multiple resources.",
                "parameters": [
                    {
                        "description": "Resources",
                        "name": "resources",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AnyResource"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ApplyResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configurations": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List Configurations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configurations/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get configuration by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigurationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete configuration by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configurations/{name}/copy": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Duplicate an existing configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the configuration to duplicate",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the desired name of the duplicate configuration",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Copy, created"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/delete": {
            "post": {
                "description": "/delete endpoint will try to parse resources\nand delete them from the store.  Additionally\nit will send reconfigure tasks to affected agents.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete multiple resources",
                "parameters": [
                    {
                        "description": "Resources",
                        "name": "resources",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AnyResource"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DeleteResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destination-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List destination types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationTypesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destination-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get destination type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the destination type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete destination type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the destination type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destinations": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List destinations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/destinations/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get destination by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the destination",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DestinationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete destination by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the destination to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processor-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List processor types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorTypesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processor-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get processor type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the processor type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete processor type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the processor type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processors": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List processors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/processors/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get processor by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the processor",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete processor by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the processor to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/source-types": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List source types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourceTypesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/source-types/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get source type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the source type",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourceTypeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete source type by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the source type to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sources": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourcesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sources/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get source by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the source",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SourceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete source by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of the source to delete",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Delete, no content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Returns the current bindplane version of the server.",
                "produces": [
                    "application/json"
                ],
                "summary": "Server version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Agent": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "configuration": {
                    "description": "tracked by BindPlane"
                },
                "connectedAt": {
                    "type": "string"
                },
                "disconnectedAt": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "home": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "$ref": "#/definitions/model.Labels"
                },
                "macAddress": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operatingSystem": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "protocol": {
                    "description": "used by the agent management protocol",
                    "type": "string"
                },
                "remoteAddress": {
                    "type": "string"
                },
                "state": {},
                "status": {
                    "description": "reported by Status messages",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentStatus"
                        }
                    ]
                },
                "tls": {
                    "description": "TLS from the agent's manager.yaml",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ManagerTLS"
                        }
                    ]
                },
                "type": {
                    "type": "string"
                },
                "upgrade": {
                    "description": "Upgrade stores information about an agent upgrade",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentUpgrade"
                        }
                    ]
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.AgentDownload": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.AgentInstaller": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "model.AgentLabelsPayload": {
            "type": "object",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "model.AgentLabelsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "$ref": "#/definitions/model.Labels"
                }
            }
        },
        "model.AgentResponse": {
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/model.Agent"
                }
            }
        },
        "model.AgentSelector": {
            "type": "object",
            "properties": {
                "matchLabels": {
                    "$ref": "#/definitions/model.MatchLabels"
                }
            }
        },
        "model.AgentStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                4,
                5,
                6,
                7
            ],
            "x-enum-varnames": [
                "Disconnected",
                "Connected",
                "Error",
                "ComponentFailed",
                "Deleted",
                "Configuring",
                "Upgrading"
            ]
        },
        "model.AgentUpgrade": {
            "type": "object",
            "properties": {
                "allPackagesHash": {
                    "description": "AllPackagesHash is the hash of the packages sent to the agent to upgrade",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "error": {
                    "description": "Error is set if there were errors upgrading the agent",
                    "type": "string"
                },
                "status": {
                    "description": "Status indicates the progress of the agent upgrade",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentUpgradeStatus"
                        }
                    ]
                },
                "version": {
                    "description": "Version is used to indicate that an agent should be or is being upgraded. The agent status will be set to Upgrading\nwhen the upgrade begins.",
                    "type": "string"
                }
            }
        },
        "model.AgentUpgradeStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "UpgradePending",
                "UpgradeStarted",
                "UpgradeFailed"
            ]
        },
        "model.AgentVersion": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "description": "Spec TODO(doc)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AgentVersionSpec"
                        }
                    ]
                }
            }
        },
        "model.AgentVersionResponse": {
            "type": "object",
            "properties": {
                "agentVersion": {
                    "$ref": "#/definitions/model.AgentVersion"
                }
            }
        },
        "model.AgentVersionSpec": {
            "type": "object",
            "properties": {
                "download": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.AgentDownload"
                    }
                },
                "draft": {
                    "type": "boolean"
                },
                "installer": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.AgentInstaller"
                    }
                },
                "prerelease": {
                    "type": "boolean"
                },
                "releaseDate": {
                    "description": "ReleaseDate is an RFC3339 encoded date in a string",
                    "type": "string"
                },
                "releaseNotesURL": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.AgentVersionsResponse": {
            "type": "object",
            "properties": {
                "agentVersions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AgentVersion"
                    }
                }
            }
        },
        "model.AgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Agent"
                    }
                }
            }
        },
        "model.AnyResource": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "model.ApplyResponse": {
            "type": "object",
            "properties": {
                "updates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceStatus"
                    }
                }
            }
        },
        "model.BulkAgentLabelsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.Configuration": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "description": "Spec TODO(doc)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ConfigurationSpec"
                        }
                    ]
                }
            }
        },
        "model.ConfigurationResponse": {
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/model.Configuration"
                },
                "raw": {
                    "type": "string"
                }
            }
        },
        "model.ConfigurationSpec": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "raw": {
                    "type": "string"
                },
                "selector": {
                    "$ref": "#/definitions/model.AgentSelector"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                }
            }
        },
        "model.ConfigurationsResponse": {
            "type": "object",
            "properties": {
                "configurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Configuration"
                    }
                }
            }
        },
        "model.DeleteAgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Agent"
                    }
                }
            }
        },
        "model.DeleteResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceStatus"
                    }
                }
            }
        },
        "model.Destination": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "description": "Spec TODO(doc)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ParameterizedSpec"
                        }
                    ]
                }
            }
        },
        "model.DestinationResponse": {
            "type": "object",
            "properties": {
                "destination": {
                    "$ref": "#/definitions/model.Destination"
                }
            }
        },
        "model.DestinationType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ResourceTypeSpec"
                }
            }
        },
        "model.DestinationTypeResponse": {
            "type": "object",
            "properties": {
                "destinationType": {
                    "$ref": "#/definitions/model.DestinationType"
                }
            }
        },
        "model.DestinationTypesResponse": {
            "type": "object",
            "properties": {
                "destinationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DestinationType"
                    }
                }
            }
        },
        "model.DestinationsResponse": {
            "type": "object",
            "properties": {
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Destination"
                    }
                }
            }
        },
        "model.DocumentationLink": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.InstallCommandResponse": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                }
            }
        },
        "model.Kind": {
            "type": "string",
            "enum": [
                "Profile",
                "Context",
                "Configuration",
                "Agent",
                "AgentVersion",
                "Source",
                "Processor",
                "Destination",
                "SourceType",
                "ProcessorType",
                "DestinationType",
                "Unknown"
            ],
            "x-enum-varnames": [
                "KindProfile",
                "KindContext",
                "KindConfiguration",
                "KindAgent",
                "KindAgentVersion",
                "KindSource",
                "KindProcessor",
                "KindDestination",
                "KindSourceType",
                "KindProcessorType",
                "KindDestinationType",
                "KindUnknown"
            ]
        },
        "model.Labels": {
            "type": "object"
        },
        "model.ManagerTLS": {
            "type": "object",
            "properties": {
                "ca_file": {
                    "type": "string"
                },
                "cert_file": {
                    "type": "string"
                },
                "insecure_skip_verify": {
                    "type": "boolean"
                },
                "key_file": {
                    "type": "string"
                }
            }
        },
        "model.MatchLabels": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "model.Metadata": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "$ref": "#/definitions/model.Labels"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.MetricCategory": {
            "type": "object",
            "properties": {
                "column": {
                    "description": "0 or 1",
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MetricOption"
                    }
                }
            }
        },
        "model.MetricOption": {
            "type": "object",
            "properties": {
                "defaultDisabled": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "kpi": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Parameter": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "description": "This could be any of the following: string, bool, int, enum (string), float, []string"
                }
            }
        },
        "model.ParameterDefinition": {
            "type": "object",
            "properties": {
                "advancedConfig": {
                    "type": "boolean"
                },
                "default": {
                    "description": "Must be valid according to Type \u0026 ValidValues"
                },
                "description": {
                    "type": "string"
                },
                "documentation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DocumentationLink"
                    }
                },
                "hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/model.ParameterOptions"
                },
                "relevantIf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RelevantIfCondition"
                    }
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "description": "\"string\", \"int\", \"bool\", \"strings\", or \"enum\"",
                    "type": "string"
                },
                "validValues": {
                    "description": "only useable if Type == \"enum\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.ParameterOptions": {
            "type": "object",
            "properties": {
                "creatable": {
                    "description": "Creatable will modify the \"enum\" parameter from a select to\na creatable select where a user can specify a custom value",
                    "type": "boolean"
                },
                "gridColumns": {
                    "description": "GridColumns will specify the number of flex-grid columns the\ncontrol will take up, must be an integer between 1 and 12 or\nunspecified.",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels indicate labels that can be used when rendering the parameter. This was added for the \"map\" parameter type\nto make the \"key\" and \"value\" labels configurable.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metricCategories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MetricCategory"
                    }
                },
                "multiline": {
                    "description": "Multiline indicates that a multiline textarea should be used for editing a \"string\" parameter.",
                    "type": "boolean"
                },
                "password": {
                    "description": "Password indicates the string field is for a password and will be hidden by the UI.\nOnly applies to string parameters.",
                    "type": "boolean"
                },
                "sectionHeader": {
                    "description": "SectionHeader is used to indicate that the bool parameter input is\na switch for further configuration for UI styling.",
                    "type": "boolean"
                },
                "trackUnchecked": {
                    "description": "TrackUnchecked will modify the \"enums\" parameter to store the\nunchecked values as the value.",
                    "type": "boolean"
                }
            }
        },
        "model.ParameterizedSpec": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Parameter"
                    }
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.PatchAgentVersionsRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.PostAgentVersionRequest": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "model.Processor": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "description": "Spec TODO(doc)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ParameterizedSpec"
                        }
                    ]
                }
            }
        },
        "model.ProcessorResponse": {
            "type": "object",
            "properties": {
                "processor": {
                    "$ref": "#/definitions/model.Processor"
                }
            }
        },
        "model.ProcessorType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ResourceTypeSpec"
                }
            }
        },
        "model.ProcessorTypeResponse": {
            "type": "object",
            "properties": {
                "processorType": {
                    "$ref": "#/definitions/model.ProcessorType"
                }
            }
        },
        "model.ProcessorTypesResponse": {
            "type": "object",
            "properties": {
                "processorTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProcessorType"
                    }
                }
            }
        },
        "model.ProcessorsResponse": {
            "type": "object",
            "properties": {
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Processor"
                    }
                }
            }
        },
        "model.RelevantIfCondition": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "model.ResourceConfiguration": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Parameter"
                    }
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceConfiguration"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.ResourceStatus": {
            "type": "object",
            "properties": {
                "reason": {
                    "description": "Reason will be set if status is invalid or error",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource TODO(doc)"
                },
                "status": {
                    "description": "Status TODO(doc)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.UpdateStatus"
                        }
                    ]
                }
            }
        },
        "model.ResourceTypeOutput": {
            "type": "object",
            "properties": {
                "exporters": {
                    "type": "string"
                },
                "extensions": {
                    "type": "string"
                },
                "processors": {
                    "type": "string"
                },
                "receivers": {
                    "type": "string"
                }
            }
        },
        "model.ResourceTypeSpec": {
            "type": "object",
            "properties": {
                "logs": {
                    "description": "individual",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceTypeOutput"
                        }
                    ]
                },
                "logs+metrics": {
                    "description": "pairs (alphabetical order)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceTypeOutput"
                        }
                    ]
                },
                "logs+metrics+traces": {
                    "description": "all three (alphabetical order)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceTypeOutput"
                        }
                    ]
                },
                "logs+traces": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "metrics": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "metrics+traces": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "parameters": {
                    "description": "Parameters currently uses the model from stanza. Eventually we will probably create a separate definition for\nBindPlane.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ParameterDefinition"
                    }
                },
                "supportedPlatforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "traces": {
                    "$ref": "#/definitions/model.ResourceTypeOutput"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.Source": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "description": "Spec TODO(doc)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ParameterizedSpec"
                        }
                    ]
                }
            }
        },
        "model.SourceResponse": {
            "type": "object",
            "properties": {
                "source": {
                    "$ref": "#/definitions/model.Source"
                }
            }
        },
        "model.SourceType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/model.Kind"
                },
                "metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/model.ResourceTypeSpec"
                }
            }
        },
        "model.SourceTypeResponse": {
            "type": "object",
            "properties": {
                "sourceType": {
                    "$ref": "#/definitions/model.SourceType"
                }
            }
        },
        "model.SourceTypesResponse": {
            "type": "object",
            "properties": {
                "sourceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SourceType"
                    }
                }
            }
        },
        "model.SourcesResponse": {
            "type": "object",
            "properties": {
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Source"
                    }
                }
            }
        },
        "model.UpdateStatus": {
            "type": "string",
            "enum": [
                "unchanged",
                "configured",
                "created",
                "deleted",
                "invalid",
                "error",
                "in-use"
            ],
            "x-enum-varnames": [
                "StatusUnchanged",
                "StatusConfigured",
                "StatusCreated",
                "StatusDeleted",
                "StatusInvalid",
                "StatusError",
                "StatusInUse"
            ]
        },
        "rest.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
