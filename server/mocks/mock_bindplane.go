// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	agent "github.com/observiq/bindplane-op/agent"
	authenticator "github.com/observiq/bindplane-op/authenticator"

	mock "github.com/stretchr/testify/mock"

	server "github.com/observiq/bindplane-op/server"

	store "github.com/observiq/bindplane-op/store"

	zap "go.uber.org/zap"
)

// MockBindPlane is an autogenerated mock type for the BindPlane type
type MockBindPlane struct {
	mock.Mock
}

// Authenticator provides a mock function with given fields:
func (_m *MockBindPlane) Authenticator() authenticator.Authenticator {
	ret := _m.Called()

	var r0 authenticator.Authenticator
	if rf, ok := ret.Get(0).(func() authenticator.Authenticator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticator.Authenticator)
		}
	}

	return r0
}

// BindPlaneInsecureSkipVerify provides a mock function with given fields:
func (_m *MockBindPlane) BindPlaneInsecureSkipVerify() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BindPlaneURL provides a mock function with given fields:
func (_m *MockBindPlane) BindPlaneURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *MockBindPlane) Logger() *zap.Logger {
	ret := _m.Called()

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// Manager provides a mock function with given fields:
func (_m *MockBindPlane) Manager() server.Manager {
	ret := _m.Called()

	var r0 server.Manager
	if rf, ok := ret.Get(0).(func() server.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Manager)
		}
	}

	return r0
}

// Relayers provides a mock function with given fields:
func (_m *MockBindPlane) Relayers() server.Relayers {
	ret := _m.Called()

	var r0 server.Relayers
	if rf, ok := ret.Get(0).(func() server.Relayers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Relayers)
		}
	}

	return r0
}

// SecretKey provides a mock function with given fields:
func (_m *MockBindPlane) SecretKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Store provides a mock function with given fields:
func (_m *MockBindPlane) Store() store.Store {
	ret := _m.Called()

	var r0 store.Store
	if rf, ok := ret.Get(0).(func() store.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Store)
		}
	}

	return r0
}

// Versions provides a mock function with given fields:
func (_m *MockBindPlane) Versions() agent.Versions {
	ret := _m.Called()

	var r0 agent.Versions
	if rf, ok := ret.Get(0).(func() agent.Versions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(agent.Versions)
		}
	}

	return r0
}

// WebsocketURL provides a mock function with given fields:
func (_m *MockBindPlane) WebsocketURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockBindPlane interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBindPlane creates a new instance of MockBindPlane. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBindPlane(t mockConstructorTestingTNewMockBindPlane) *MockBindPlane {
	mock := &MockBindPlane{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
