// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	eventbus "github.com/observiq/bindplane-op/eventbus"
	mock "github.com/stretchr/testify/mock"

	model "github.com/observiq/bindplane-op/model"

	protocol "github.com/observiq/bindplane-op/server/protocol"

	server "github.com/observiq/bindplane-op/server"

	store "github.com/observiq/bindplane-op/store"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// Agent provides a mock function with given fields: ctx, agentID
func (_m *MockManager) Agent(ctx context.Context, agentID string) (*model.Agent, error) {
	ret := _m.Called(ctx, agentID)

	var r0 *model.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Agent, error)); ok {
		return rf(ctx, agentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Agent); ok {
		r0 = rf(ctx, agentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, agentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentMessages provides a mock function with given fields: ctx
func (_m *MockManager) AgentMessages(ctx context.Context) eventbus.Source[server.Message] {
	ret := _m.Called(ctx)

	var r0 eventbus.Source[server.Message]
	if rf, ok := ret.Get(0).(func(context.Context) eventbus.Source[server.Message]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventbus.Source[server.Message])
		}
	}

	return r0
}

// AgentUpdates provides a mock function with given fields: ctx, agent
func (_m *MockManager) AgentUpdates(ctx context.Context, agent *model.Agent) (*protocol.AgentUpdates, error) {
	ret := _m.Called(ctx, agent)

	var r0 *protocol.AgentUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Agent) (*protocol.AgentUpdates, error)); ok {
		return rf(ctx, agent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Agent) *protocol.AgentUpdates); ok {
		r0 = rf(ctx, agent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.AgentUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Agent) error); ok {
		r1 = rf(ctx, agent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentVersion provides a mock function with given fields: ctx, version
func (_m *MockManager) AgentVersion(ctx context.Context, version string) (*model.AgentVersion, error) {
	ret := _m.Called(ctx, version)

	var r0 *model.AgentVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AgentVersion, error)); ok {
		return rf(ctx, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AgentVersion); ok {
		r0 = rf(ctx, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AgentVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindPlaneInsecureSkipVerify provides a mock function with given fields:
func (_m *MockManager) BindPlaneInsecureSkipVerify() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BindPlaneURL provides a mock function with given fields:
func (_m *MockManager) BindPlaneURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EnableProtocol provides a mock function with given fields: _a0
func (_m *MockManager) EnableProtocol(_a0 protocol.Protocol) {
	_m.Called(_a0)
}

// RequestReport provides a mock function with given fields: ctx, agentID, configuration
func (_m *MockManager) RequestReport(ctx context.Context, agentID string, configuration protocol.Report) error {
	ret := _m.Called(ctx, agentID, configuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, protocol.Report) error); ok {
		r0 = rf(ctx, agentID, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceStore provides a mock function with given fields:
func (_m *MockManager) ResourceStore() model.ResourceStore {
	ret := _m.Called()

	var r0 model.ResourceStore
	if rf, ok := ret.Get(0).(func() model.ResourceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ResourceStore)
		}
	}

	return r0
}

// SendAgentMessage provides a mock function with given fields: ctx, message
func (_m *MockManager) SendAgentMessage(ctx context.Context, message server.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, server.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: _a0
func (_m *MockManager) Shutdown(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *MockManager) Start(ctx context.Context) {
	_m.Called(ctx)
}

// Store provides a mock function with given fields:
func (_m *MockManager) Store() store.Store {
	ret := _m.Called()

	var r0 store.Store
	if rf, ok := ret.Get(0).(func() store.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Store)
		}
	}

	return r0
}

// UpsertAgent provides a mock function with given fields: ctx, agentID, updater
func (_m *MockManager) UpsertAgent(ctx context.Context, agentID string, updater store.AgentUpdater) (*model.Agent, error) {
	ret := _m.Called(ctx, agentID, updater)

	var r0 *model.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, store.AgentUpdater) (*model.Agent, error)); ok {
		return rf(ctx, agentID, updater)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, store.AgentUpdater) *model.Agent); ok {
		r0 = rf(ctx, agentID, updater)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, store.AgentUpdater) error); ok {
		r1 = rf(ctx, agentID, updater)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySecretKey provides a mock function with given fields: ctx, secretKey
func (_m *MockManager) VerifySecretKey(ctx context.Context, secretKey string) (context.Context, bool) {
	ret := _m.Called(ctx, secretKey)

	var r0 context.Context
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, bool)); ok {
		return rf(ctx, secretKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, secretKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, secretKey)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockManager(t mockConstructorTestingTNewMockManager) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
