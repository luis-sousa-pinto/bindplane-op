# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# These ship with gqlgen https://gqlgen.com/reference/scalars/
scalar Time
scalar Map
scalar Any

# ----------------------------------------------------------------------
# agent model

type AgentUpgrade {
  status: Int!
  version: String!
  error: String
}

type Agent {
  id: ID!
  architecture: String
  hostName: String
  labels: Map
  platform: String
  operatingSystem: String
  version: String

  name: String!
  home: String
  macAddress: String
  remoteAddress: String

  type: String

  status: Int!
  errorMessage: String

  connectedAt: Time
  disconnectedAt: Time

  configuration: AgentConfiguration

  # resource of the configuration in use by this agent
  configurationResource: Configuration

  upgrade: AgentUpgrade

  # latest version of the agent if an upgrade is available
  upgradeAvailable: String

  # bitmask of features supported by this agent
  features: Int!
}

type AgentConfiguration {
  Collector: String
  Logging: String
  Manager: Map
}

# ----------------------------------------------------------------------
# shared resource models

type Metadata {
  id: ID!
  name: String!
  displayName: String
  description: String
  icon: String
  labels: Map
  version: Version!
  dateModified: Time
}

type AgentSelector {
  matchLabels: Map
}

scalar Version

# ----------------------------------------------------------------------
# configuration model

type Configuration {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
  spec: ConfigurationSpec!

  # number of agents using this configuration. this count is obtained using a separate resolver and may not be efficient
  # to generate. it depends on store.Store.AgentIDsUsingConfiguration.
  agentCount: Int

  # a subset of [logs, metrics, traces]
  activeTypes: [String!]

  graph: Graph

  # the rendered yaml of a managed configuration
  rendered: String

  status: ConfigurationStatus!
}

type ConfigurationStatus {
  rollout: Rollout!
  currentVersion: Version!

  current: Boolean!
  pending: Boolean!
  latest: Boolean!
}

type Rollout {
  options: RolloutOptions
  status: RolloutStatus!
  phase: Int!
  completed: Int!
  errors: Int!
  pending: Int!
  waiting: Int!
}

scalar RolloutStatus

type RolloutOptions {
  startAutomatically: Boolean!
  rollbackOnFailure: Boolean!
  maxErrors: Int!
  phaseAgentCount: PhaseAgentCount
}

type PhaseAgentCount {
  initial: Int!
  multiplier: Float!
  maximum: Int!
}

type ConfigurationSpec {
  contentType: String
  raw: String
  sources: [ResourceConfiguration!]
  destinations: [ResourceConfiguration!]
  selector: AgentSelector
}

type ResourceConfiguration {
  id: String
  name: String
  displayName: String
  type: String
  parameters: [Parameter!]
  processors: [ResourceConfiguration!]
  disabled: Boolean!
}

type Parameter {
  name: String!
  value: Any!
  sensitive: Boolean
}

# ----------------------------------------------------------------------
# graph used for configuration and agent topology

type Graph {
  sources: [Node!]!
  intermediates: [Node!]!
  targets: [Node!]!
  edges: [Edge!]!
  attributes: Map!
}

type Node {
  id: String!
  type: String!
  label: String!
  attributes: Map!
}

type Edge {
  id: String!
  source: String!
  target: String!
}

# ----------------------------------------------------------------------
# configurations query result

type Configurations {
  query: String
  configurations: [Configuration!]!
  suggestions: [Suggestion!]
}

# ----------------------------------------------------------------------
# agents query result

type Agents {
  query: String
  agents: [Agent!]!
  suggestions: [Suggestion!]
  latestVersion: String!
}

type Suggestion {
  label: String!
  query: String!
}

# ----------------------------------------------------------------------
# agentChanges subscription result

enum AgentChangeType {
  INSERT
  UPDATE
  REMOVE
}

type AgentChange {
  agent: Agent!
  changeType: AgentChangeType!
}

# ----------------------------------------------------------------------
# event subscription result

enum EventType {
  INSERT
  UPDATE
  REMOVE
}

type ConfigurationChange {
  configuration: Configuration!
  eventType: EventType!
}

# ----------------------------------------------------------------------
# resource types

type SourceType {
  apiVersion: String!
  metadata: Metadata!
  kind: String!
  spec: ResourceTypeSpec!
}

type ProcessorType {
  apiVersion: String!
  metadata: Metadata!
  kind: String!
  spec: ResourceTypeSpec!
}

type DestinationType {
  apiVersion: String!
  metadata: Metadata!
  kind: String!
  spec: ResourceTypeSpec!
}

type ResourceTypeSpec {
  version: String!

  parameters: [ParameterDefinition!]! #todo
  supportedPlatforms: [String!]!

  telemetryTypes: [PipelineType!]!
}

enum PipelineType {
  logs
  metrics
  traces
}

enum ParameterType {
  string
  strings
  int
  bool
  enum
  enums
  map
  yaml
  timezone
  metrics
  awsCloudwatchNamedField
}

type ParameterDefinition {
  name: String!
  label: String!
  description: String!
  required: Boolean!

  type: ParameterType!

  validValues: [String!]

  default: Any
  relevantIf: [RelevantIfCondition!]
  advancedConfig: Boolean

  options: ParameterOptions!

  documentation: [DocumentationLink!]
}

type DocumentationLink {
  text: String!
  url: String!
}

type ParameterOptions {
  creatable: Boolean
  trackUnchecked: Boolean
  gridColumns: Int
  sectionHeader: Boolean
  metricCategories: [MetricCategory!]
  multiline: Boolean
  labels: Map
  password: Boolean
  sensitive: Boolean
}

type MetricCategory {
  label: String!
  column: Int!
  metrics: [MetricOption!]!
}

type MetricOption {
  name: String!
  description: String
  kpi: Boolean
  defaultDisabled: Boolean
}

type RelevantIfCondition {
  name: String!
  operator: RelevantIfOperatorType!
  value: Any!
}

enum RelevantIfOperatorType {
  equals
  notEquals
  containsAny
}

# ----------------------------------------------------------------------
# sources, processors, and destinations

type Source {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
  spec: ParameterizedSpec!
}

type Processor {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
  spec: ParameterizedSpec!
}

type Destination {
  apiVersion: String!
  kind: String!
  metadata: Metadata!
  spec: ParameterizedSpec!
}

type DestinationWithType {
  destination: Destination
  destinationType: DestinationType
}

type ParameterizedSpec {
  type: String!
  parameters: [Parameter!]
  processors: [ResourceConfiguration!]
  disabled: Boolean!
}

# ----------------------------------------------------------------------
# telemetry

type Metric {
  name: String
  timestamp: Time
  value: Any
  unit: String
  type: String
  attributes: Map
  resource: Map
}

type Log {
  timestamp: Time
  body: Any
  severity: String
  attributes: Map
  resource: Map
}

type Trace {
  name: String
  traceID: String
  spanID: String
  parentSpanID: String
  start: Time
  end: Time
  attributes: Map
  resource: Map
}

type Snapshot {
  logs: [Log!]!
  metrics: [Metric!]!
  traces: [Trace!]!
}

type OverviewPage {
  graph: Graph!
}

# ----------------------------------------------------------------------
# metrics

type GraphMetric {
  # name of the metric, e.g. log_data_size
  name: String!
  # ID of the graph node for this metric
  nodeID: String!
  # logs, metrics, or traces
  pipelineType: String!
  # numeric value of the metric
  value: Float!
  # unit for the metric, e.g. B/s
  unit: String!
  # associated agentID when metric is agent specific
  agentID: ID
}

type GraphMetrics {
  metrics: [GraphMetric!]!
  maxMetricValue: Float!
  maxLogValue: Float!
  maxTraceValue: Float!
}

# ----------------------------------------------------------------------
# queries

type Query {
  overviewPage(
    configIDs: [ID!]
    destinationIDs: [ID!]
    period: String!
    telemetryType: String!
  ): OverviewPage!

  agents(selector: String, query: String): Agents!
  agent(id: ID!): Agent

  configurations(
    selector: String
    query: String
    onlyDeployedConfigurations: Boolean
  ): Configurations!
  configuration(name: String!): Configuration

  configurationHistory(name: String!): [Configuration!]!

  sources: [Source!]!
  source(name: String!): Source

  sourceTypes: [SourceType!]!
  sourceType(name: String!): SourceType

  processors: [Processor!]!
  processor(name: String!): Processor

  processorTypes: [ProcessorType!]!
  processorType(name: String!): ProcessorType

  destinations(query: String, filterUnused: Boolean): [Destination!]!
  destination(name: String!): Destination
  destinationWithType(name: String!): DestinationWithType!

  destinationTypes: [DestinationType!]!
  destinationType(name: String!): DestinationType

  snapshot(
    agentID: String!
    pipelineType: PipelineType!
    position: String
    resourceName: String
  ): Snapshot!

  agentMetrics(period: String!, ids: [ID!]): GraphMetrics!
  configurationMetrics(period: String!, name: String): GraphMetrics!
  overviewMetrics(
    period: String!
    configIDs: [ID!]
    destinationIDs: [ID!]
  ): GraphMetrics!
}

# ----------------------------------------------------------------------
# user roles

enum Role {
  admin
  user
  viewer
}

# ----------------------------------------------------------------------
# subscriptions

type Subscription {
  agentChanges(selector: String, query: String): [AgentChange!]!
  configurationChanges(selector: String, query: String): [ConfigurationChange!]!

  agentMetrics(period: String!, ids: [ID!]): GraphMetrics!
  configurationMetrics(
    period: String!
    name: String
    agent: String
  ): GraphMetrics!
  overviewMetrics(
    period: String!
    configIDs: [ID!]
    destinationIDs: [ID!]
  ): GraphMetrics!
}

# ----------------------------------------------------------------------
# mutations

enum ResourceTypeKind {
  SOURCE
  DESTINATION
}

input ParameterInput {
  name: String!
  value: Any!
}

input ProcessorInput {
  name: String
  displayName: String
  type: String
  parameters: [ParameterInput!]
  disabled: Boolean
}

input UpdateProcessorsInput {
  configuration: String!
  resourceType: ResourceTypeKind!
  resourceIndex: Int!
  processors: [ProcessorInput!]!
}

input RemoveAgentConfigurationInput {
  agentId: String!
}

input ClearAgentUpgradeErrorInput {
  agentId: String!
}

input EditConfigurationDescriptionInput {
  name: String!
  description: String!
}

type Mutation {
  updateProcessors(input: UpdateProcessorsInput!): Boolean
  removeAgentConfiguration(input: RemoveAgentConfigurationInput): Agent
  clearAgentUpgradeError(input: ClearAgentUpgradeErrorInput!): Boolean

  editConfigurationDescription(
    input: EditConfigurationDescriptionInput!
  ): Boolean
}
