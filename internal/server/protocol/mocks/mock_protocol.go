// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/observiq/bindplane-op/model"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/observiq/bindplane-op/internal/server/protocol"
)

// MockProtocol is an autogenerated mock type for the Protocol type
type MockProtocol struct {
	mock.Mock
}

// Connected provides a mock function with given fields: agentID
func (_m *MockProtocol) Connected(agentID string) bool {
	ret := _m.Called(agentID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(agentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConnectedAgentIDs provides a mock function with given fields: _a0
func (_m *MockProtocol) ConnectedAgentIDs(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: agentID
func (_m *MockProtocol) Disconnect(agentID string) bool {
	ret := _m.Called(agentID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(agentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockProtocol) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RequestReport provides a mock function with given fields: ctx, agentID, report
func (_m *MockProtocol) RequestReport(ctx context.Context, agentID string, report protocol.Report) error {
	ret := _m.Called(ctx, agentID, report)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, protocol.Report) error); ok {
		r0 = rf(ctx, agentID, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendHeartbeat provides a mock function with given fields: agentID
func (_m *MockProtocol) SendHeartbeat(agentID string) error {
	ret := _m.Called(agentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(agentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAgent provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockProtocol) UpdateAgent(_a0 context.Context, _a1 *model.Agent, _a2 *protocol.AgentUpdates) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Agent, *protocol.AgentUpdates) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockProtocol interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockProtocol creates a new instance of MockProtocol. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProtocol(t mockConstructorTestingTNewMockProtocol) *MockProtocol {
	mock := &MockProtocol{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
