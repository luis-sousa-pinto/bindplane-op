// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	record "github.com/observiq/bindplane-op/internal/otlp/record"
	mock "github.com/stretchr/testify/mock"

	stats "github.com/observiq/bindplane-op/internal/store/stats"
)

// MockMeasurements is an autogenerated mock type for the Measurements type
type MockMeasurements struct {
	mock.Mock
}

// AgentMetrics provides a mock function with given fields: ctx, id, options
func (_m *MockMeasurements) AgentMetrics(ctx context.Context, id []string, options ...stats.QueryOption) (stats.MetricData, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 stats.MetricData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, ...stats.QueryOption) (stats.MetricData, error)); ok {
		return rf(ctx, id, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, ...stats.QueryOption) stats.MetricData); ok {
		r0 = rf(ctx, id, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stats.MetricData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, ...stats.QueryOption) error); ok {
		r1 = rf(ctx, id, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clear provides a mock function with given fields:
func (_m *MockMeasurements) Clear() {
	_m.Called()
}

// ConfigurationMetrics provides a mock function with given fields: ctx, name, options
func (_m *MockMeasurements) ConfigurationMetrics(ctx context.Context, name string, options ...stats.QueryOption) (stats.MetricData, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 stats.MetricData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...stats.QueryOption) (stats.MetricData, error)); ok {
		return rf(ctx, name, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...stats.QueryOption) stats.MetricData); ok {
		r0 = rf(ctx, name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stats.MetricData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...stats.QueryOption) error); ok {
		r1 = rf(ctx, name, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeasurementsSize provides a mock function with given fields:
func (_m *MockMeasurements) MeasurementsSize() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverviewMetrics provides a mock function with given fields: ctx, options
func (_m *MockMeasurements) OverviewMetrics(ctx context.Context, options ...stats.QueryOption) (stats.MetricData, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 stats.MetricData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...stats.QueryOption) (stats.MetricData, error)); ok {
		return rf(ctx, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...stats.QueryOption) stats.MetricData); ok {
		r0 = rf(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stats.MetricData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...stats.QueryOption) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessMetrics provides a mock function with given fields: ctx
func (_m *MockMeasurements) ProcessMetrics(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAgentMetrics provides a mock function with given fields: ctx, metrics
func (_m *MockMeasurements) SaveAgentMetrics(ctx context.Context, metrics []*record.Metric) error {
	ret := _m.Called(ctx, metrics)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*record.Metric) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMeasurements interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMeasurements creates a new instance of MockMeasurements. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMeasurements(t mockConstructorTestingTNewMockMeasurements) *MockMeasurements {
	mock := &MockMeasurements{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
