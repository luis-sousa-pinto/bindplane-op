// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/observiq/bindplane-op/client"

	mock "github.com/stretchr/testify/mock"

	model "github.com/observiq/bindplane-op/model"

	version "github.com/observiq/bindplane-op/version"
)

// MockBindPlane is an autogenerated mock type for the BindPlane type
type MockBindPlane struct {
	mock.Mock
}

// Agent provides a mock function with given fields: ctx, id
func (_m *MockBindPlane) Agent(ctx context.Context, id string) (*model.Agent, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Agent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Agent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentInstallCommand provides a mock function with given fields: ctx, options
func (_m *MockBindPlane) AgentInstallCommand(ctx context.Context, options client.AgentInstallOptions) (string, error) {
	ret := _m.Called(ctx, options)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.AgentInstallOptions) (string, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.AgentInstallOptions) string); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.AgentInstallOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentLabels provides a mock function with given fields: ctx, id
func (_m *MockBindPlane) AgentLabels(ctx context.Context, id string) (*model.Labels, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Labels
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Labels, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Labels); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Labels)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentUpgrade provides a mock function with given fields: ctx, id, _a2
func (_m *MockBindPlane) AgentUpgrade(ctx context.Context, id string, _a2 string) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentVersion provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) AgentVersion(ctx context.Context, name string) (*model.AgentVersion, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.AgentVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AgentVersion, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AgentVersion); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AgentVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentVersions provides a mock function with given fields: ctx
func (_m *MockBindPlane) AgentVersions(ctx context.Context) ([]*model.AgentVersion, error) {
	ret := _m.Called(ctx)

	var r0 []*model.AgentVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.AgentVersion, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.AgentVersion); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AgentVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Agents provides a mock function with given fields: ctx, options
func (_m *MockBindPlane) Agents(ctx context.Context, options client.QueryOptions) ([]*model.Agent, error) {
	ret := _m.Called(ctx, options)

	var r0 []*model.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.QueryOptions) ([]*model.Agent, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.QueryOptions) []*model.Agent); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.QueryOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Apply provides a mock function with given fields: ctx, r
func (_m *MockBindPlane) Apply(ctx context.Context, r []*model.AnyResource) ([]*model.AnyResourceStatus, error) {
	ret := _m.Called(ctx, r)

	var r0 []*model.AnyResourceStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.AnyResource) ([]*model.AnyResourceStatus, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*model.AnyResource) []*model.AnyResourceStatus); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AnyResourceStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*model.AnyResource) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyAgentLabels provides a mock function with given fields: ctx, id, labels, override
func (_m *MockBindPlane) ApplyAgentLabels(ctx context.Context, id string, labels *model.Labels, override bool) (*model.Labels, error) {
	ret := _m.Called(ctx, id, labels, override)

	var r0 *model.Labels
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Labels, bool) (*model.Labels, error)); ok {
		return rf(ctx, id, labels, override)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Labels, bool) *model.Labels); ok {
		r0 = rf(ctx, id, labels, override)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Labels)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Labels, bool) error); ok {
		r1 = rf(ctx, id, labels, override)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Configuration provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) Configuration(ctx context.Context, name string) (*model.Configuration, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Configuration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Configuration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Configurations provides a mock function with given fields: ctx
func (_m *MockBindPlane) Configurations(ctx context.Context) ([]*model.Configuration, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Configuration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Configuration); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyConfig provides a mock function with given fields: ctx, name, copyName
func (_m *MockBindPlane) CopyConfig(ctx context.Context, name string, copyName string) error {
	ret := _m.Called(ctx, name, copyName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, copyName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, r
func (_m *MockBindPlane) Delete(ctx context.Context, r []*model.AnyResource) ([]*model.AnyResourceStatus, error) {
	ret := _m.Called(ctx, r)

	var r0 []*model.AnyResourceStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.AnyResource) ([]*model.AnyResourceStatus, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*model.AnyResource) []*model.AnyResourceStatus); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AnyResourceStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*model.AnyResource) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAgentVersion provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteAgentVersion(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAgents provides a mock function with given fields: ctx, agentIDs
func (_m *MockBindPlane) DeleteAgents(ctx context.Context, agentIDs []string) ([]*model.Agent, error) {
	ret := _m.Called(ctx, agentIDs)

	var r0 []*model.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*model.Agent, error)); ok {
		return rf(ctx, agentIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*model.Agent); ok {
		r0 = rf(ctx, agentIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, agentIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguration provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteConfiguration(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDestination provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteDestination(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDestinationType provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteDestinationType(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProcessor provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteProcessor(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProcessorType provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteProcessorType(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSource provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteSource(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSourceType provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DeleteSourceType(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destination provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) Destination(ctx context.Context, name string) (*model.Destination, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Destination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Destination, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Destination); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Destination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DestinationType provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) DestinationType(ctx context.Context, name string) (*model.DestinationType, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.DestinationType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.DestinationType, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DestinationType); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DestinationType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DestinationTypes provides a mock function with given fields: ctx
func (_m *MockBindPlane) DestinationTypes(ctx context.Context) ([]*model.DestinationType, error) {
	ret := _m.Called(ctx)

	var r0 []*model.DestinationType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.DestinationType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.DestinationType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DestinationType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destinations provides a mock function with given fields: ctx
func (_m *MockBindPlane) Destinations(ctx context.Context) ([]*model.Destination, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Destination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Destination, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Destination); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Destination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseRollout provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) PauseRollout(ctx context.Context, name string) (*model.Configuration, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Configuration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Configuration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processor provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) Processor(ctx context.Context, name string) (*model.Processor, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Processor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Processor, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Processor); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Processor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessorType provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) ProcessorType(ctx context.Context, name string) (*model.ProcessorType, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.ProcessorType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.ProcessorType, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ProcessorType); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProcessorType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessorTypes provides a mock function with given fields: ctx
func (_m *MockBindPlane) ProcessorTypes(ctx context.Context) ([]*model.ProcessorType, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ProcessorType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.ProcessorType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ProcessorType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProcessorType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processors provides a mock function with given fields: ctx
func (_m *MockBindPlane) Processors(ctx context.Context) ([]*model.Processor, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Processor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Processor, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Processor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Processor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawConfiguration provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) RawConfiguration(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceHistory provides a mock function with given fields: ctx, kind, name
func (_m *MockBindPlane) ResourceHistory(ctx context.Context, kind model.Kind, name string) ([]*model.AnyResource, error) {
	ret := _m.Called(ctx, kind, name)

	var r0 []*model.AnyResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Kind, string) ([]*model.AnyResource, error)); ok {
		return rf(ctx, kind, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Kind, string) []*model.AnyResource); ok {
		r0 = rf(ctx, kind, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AnyResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Kind, string) error); ok {
		r1 = rf(ctx, kind, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeRollout provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) ResumeRollout(ctx context.Context, name string) (*model.Configuration, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Configuration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Configuration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RolloutStatus provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) RolloutStatus(ctx context.Context, name string) (*model.Configuration, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Configuration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Configuration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Source provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) Source(ctx context.Context, name string) (*model.Source, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Source
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Source, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Source); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Source)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SourceType provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) SourceType(ctx context.Context, name string) (*model.SourceType, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.SourceType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.SourceType, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.SourceType); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SourceType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SourceTypes provides a mock function with given fields: ctx
func (_m *MockBindPlane) SourceTypes(ctx context.Context) ([]*model.SourceType, error) {
	ret := _m.Called(ctx)

	var r0 []*model.SourceType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.SourceType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.SourceType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SourceType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sources provides a mock function with given fields: ctx
func (_m *MockBindPlane) Sources(ctx context.Context) ([]*model.Source, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Source
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Source, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Source); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Source)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRollout provides a mock function with given fields: ctx, name, options
func (_m *MockBindPlane) StartRollout(ctx context.Context, name string, options *model.RolloutOptions) (*model.Configuration, error) {
	ret := _m.Called(ctx, name, options)

	var r0 *model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.RolloutOptions) (*model.Configuration, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.RolloutOptions) *model.Configuration); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.RolloutOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncAgentVersions provides a mock function with given fields: ctx, _a1
func (_m *MockBindPlane) SyncAgentVersions(ctx context.Context, _a1 string) ([]*model.AnyResourceStatus, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []*model.AnyResourceStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.AnyResourceStatus, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.AnyResourceStatus); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AnyResourceStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRollout provides a mock function with given fields: ctx, name
func (_m *MockBindPlane) UpdateRollout(ctx context.Context, name string) (*model.Configuration, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Configuration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Configuration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRollouts provides a mock function with given fields: ctx
func (_m *MockBindPlane) UpdateRollouts(ctx context.Context) ([]*model.Configuration, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Configuration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Configuration); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: ctx
func (_m *MockBindPlane) Version(ctx context.Context) (version.Version, error) {
	ret := _m.Called(ctx)

	var r0 version.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (version.Version, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) version.Version); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(version.Version)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBindPlane creates a new instance of MockBindPlane. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBindPlane(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBindPlane {
	mock := &MockBindPlane{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
